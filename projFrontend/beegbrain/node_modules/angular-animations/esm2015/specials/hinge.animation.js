import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const hinge = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ opacity: 1, 'transform-origin': 'top left', transform: 'translate3d(0, 0, 0)', easing: 'ease-in-out', offset: 0 }),
        style({ opacity: 1, 'transform-origin': 'top left', transform: 'rotate3d(0, 0, 1, 80deg)', easing: 'ease-in-out', offset: 0.2 }),
        style({ opacity: 1, 'transform-origin': 'top left', transform: 'rotate3d(0, 0, 1, 60deg)', easing: 'ease-in-out', offset: 0.4 }),
        style({ opacity: 1, 'transform-origin': 'top left', transform: 'rotate3d(0, 0, 1, 80deg)', easing: 'ease-in-out', offset: 0.6 }),
        style({ opacity: 1, 'transform-origin': 'top left', transform: 'rotate3d(0, 0, 1, 60deg)', easing: 'ease-in-out', offset: 0.8 }),
        style({ opacity: 0, 'transform-origin': 'top left', transform: 'translate3d(0, 700px, 0)', easing: 'ease-in-out', offset: 1 })
    ]))
]);
const ɵ0 = hinge;
const DEFAULT_DURATION = 2000;
export function hingeAnimation(options) {
    return trigger((options && options.anchor) || 'hinge', [
        transition('0 => 1', [...useAnimationIncludingChildren(hinge(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION
            }
        })
    ]);
}
export function hingeOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'hingeOnLeave', [
        transition(':leave', [...useAnimationIncludingChildren(hinge(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGluZ2UuYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3NwZWNpYWxzL2hpbmdlLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBNEIsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHMUgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFM0YsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQ2pCLFNBQVMsQ0FBQztJQUNSLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzFILEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoSSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDaEksS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hJLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoSSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDL0gsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDOztBQUVMLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxjQUFjLENBQUMsT0FBMkI7SUFDeEQsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUNyRCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ3pFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2FBQzVEO1NBQ0YsQ0FBQztLQUNILENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsT0FBMkI7SUFDL0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGNBQWMsRUFBRTtRQUM1RCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ3pFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2FBQzVEO1NBQ0YsQ0FBQztLQUNILENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBhbmltYXRpb24sIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSwga2V5ZnJhbWVzLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBJQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuIH0gZnJvbSAnLi4vY29tbW9uL3VzZS1hbmltYXRpb24taW5jbHVkaW5nLWNoaWxkcmVuJztcblxuY29uc3QgaGluZ2UgPSAoKSA9PlxuICBhbmltYXRpb24oW1xuICAgIGFuaW1hdGUoXG4gICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCAndHJhbnNmb3JtLW9yaWdpbic6ICd0b3AgbGVmdCcsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJywgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLCBvZmZzZXQ6IDAgfSksXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgJ3RyYW5zZm9ybS1vcmlnaW4nOiAndG9wIGxlZnQnLCB0cmFuc2Zvcm06ICdyb3RhdGUzZCgwLCAwLCAxLCA4MGRlZyknLCBlYXNpbmc6ICdlYXNlLWluLW91dCcsIG9mZnNldDogMC4yIH0pLFxuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3RvcCBsZWZ0JywgdHJhbnNmb3JtOiAncm90YXRlM2QoMCwgMCwgMSwgNjBkZWcpJywgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLCBvZmZzZXQ6IDAuNCB9KSxcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCAndHJhbnNmb3JtLW9yaWdpbic6ICd0b3AgbGVmdCcsIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIDgwZGVnKScsIGVhc2luZzogJ2Vhc2UtaW4tb3V0Jywgb2Zmc2V0OiAwLjYgfSksXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgJ3RyYW5zZm9ybS1vcmlnaW4nOiAndG9wIGxlZnQnLCB0cmFuc2Zvcm06ICdyb3RhdGUzZCgwLCAwLCAxLCA2MGRlZyknLCBlYXNpbmc6ICdlYXNlLWluLW91dCcsIG9mZnNldDogMC44IH0pLFxuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3RvcCBsZWZ0JywgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgNzAwcHgsIDApJywgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLCBvZmZzZXQ6IDEgfSlcbiAgICAgIF0pXG4gICAgKVxuICBdKTtcblxuY29uc3QgREVGQVVMVF9EVVJBVElPTiA9IDIwMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBoaW5nZUFuaW1hdGlvbihvcHRpb25zPzogSUFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2hpbmdlJywgW1xuICAgIHRyYW5zaXRpb24oJzAgPT4gMScsIFsuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihoaW5nZSgpLCBvcHRpb25zKV0sIHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT05cbiAgICAgIH1cbiAgICB9KVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpbmdlT25MZWF2ZUFuaW1hdGlvbihvcHRpb25zPzogSUFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2hpbmdlT25MZWF2ZScsIFtcbiAgICB0cmFuc2l0aW9uKCc6bGVhdmUnLCBbLi4udXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4oaGluZ2UoKSwgb3B0aW9ucyldLCB7XG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OXG4gICAgICB9XG4gICAgfSlcbiAgXSk7XG59XG4iXX0=