import { animate, animation, group, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const jackInTheBox = () => animation(group([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ 'transform-origin': 'center bottom', transform: 'scale(0.1) rotate(30deg)', easing: 'ease', offset: 0 }),
        style({ 'transform-origin': 'center bottom', transform: 'rotate(-10deg)', easing: 'ease', offset: 0.5 }),
        style({ 'transform-origin': 'center bottom', transform: 'rotate(3deg)', easing: 'ease', offset: 0.7 }),
        style({ 'transform-origin': 'center bottom', transform: 'scale(1)', easing: 'ease', offset: 1 })
    ])),
    animate('{{duration}}ms {{delay}}ms', keyframes([style({ visibility: 'visible', opacity: 0, offset: 0 }), style({ opacity: 1, offset: 1 })]))
]));
const ɵ0 = jackInTheBox;
const DEFAULT_DURATION = 1000;
export function jackInTheBoxAnimation(options) {
    return trigger((options && options.anchor) || 'jackInTheBox', [
        transition('0 => 1', [style({ visibility: 'hidden' }), ...useAnimationIncludingChildren(jackInTheBox(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION
            }
        })
    ]);
}
export function jackInTheBoxOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'jackInTheBoxOnEnter', [
        transition(':enter', [style({ visibility: 'hidden' }), ...useAnimationIncludingChildren(jackInTheBox(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFjay1pbi10aGUtYm94LmFuaW1hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zcGVjaWFscy9qYWNrLWluLXRoZS1ib3guYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUE0QixLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHakksT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFM0YsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFLENBQ3hCLFNBQVMsQ0FDUCxLQUFLLENBQUM7SUFDSixPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDaEgsS0FBSyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN4RyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN0RyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUNqRyxDQUFDLENBQ0g7SUFDRCxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdkc7Q0FDRixDQUFDLENBQ0gsQ0FBQzs7QUFFSixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixNQUFNLFVBQVUscUJBQXFCLENBQUMsT0FBMkI7SUFDL0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGNBQWMsRUFBRTtRQUM1RCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ2pILE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2FBQzVEO1NBQ0YsQ0FBQztLQUNILENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsT0FBMkI7SUFDdEUsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixFQUFFO1FBQ25FLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLDZCQUE2QixDQUFDLFlBQVksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDakgsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7YUFDNUQ7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIGFuaW1hdGlvbiwgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLCBncm91cCwga2V5ZnJhbWVzLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBJQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuIH0gZnJvbSAnLi4vY29tbW9uL3VzZS1hbmltYXRpb24taW5jbHVkaW5nLWNoaWxkcmVuJztcblxuY29uc3QgamFja0luVGhlQm94ID0gKCkgPT5cbiAgYW5pbWF0aW9uKFxuICAgIGdyb3VwKFtcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdjZW50ZXIgYm90dG9tJywgdHJhbnNmb3JtOiAnc2NhbGUoMC4xKSByb3RhdGUoMzBkZWcpJywgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMCB9KSxcbiAgICAgICAgICBzdHlsZSh7ICd0cmFuc2Zvcm0tb3JpZ2luJzogJ2NlbnRlciBib3R0b20nLCB0cmFuc2Zvcm06ICdyb3RhdGUoLTEwZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAuNSB9KSxcbiAgICAgICAgICBzdHlsZSh7ICd0cmFuc2Zvcm0tb3JpZ2luJzogJ2NlbnRlciBib3R0b20nLCB0cmFuc2Zvcm06ICdyb3RhdGUoM2RlZyknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAwLjcgfSksXG4gICAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdjZW50ZXIgYm90dG9tJywgdHJhbnNmb3JtOiAnc2NhbGUoMSknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgYW5pbWF0ZShcbiAgICAgICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICAgICAga2V5ZnJhbWVzKFtzdHlsZSh7IHZpc2liaWxpdHk6ICd2aXNpYmxlJywgb3BhY2l0eTogMCwgb2Zmc2V0OiAwIH0pLCBzdHlsZSh7IG9wYWNpdHk6IDEsIG9mZnNldDogMSB9KV0pXG4gICAgICApXG4gICAgXSlcbiAgKTtcblxuY29uc3QgREVGQVVMVF9EVVJBVElPTiA9IDEwMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBqYWNrSW5UaGVCb3hBbmltYXRpb24ob3B0aW9ucz86IElBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdqYWNrSW5UaGVCb3gnLCBbXG4gICAgdHJhbnNpdGlvbignMCA9PiAxJywgW3N0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSksIC4uLnVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuKGphY2tJblRoZUJveCgpLCBvcHRpb25zKV0sIHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT05cbiAgICAgIH1cbiAgICB9KVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGphY2tJblRoZUJveE9uRW50ZXJBbmltYXRpb24ob3B0aW9ucz86IElBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdqYWNrSW5UaGVCb3hPbkVudGVyJywgW1xuICAgIHRyYW5zaXRpb24oJzplbnRlcicsIFtzdHlsZSh7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pLCAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihqYWNrSW5UaGVCb3goKSwgb3B0aW9ucyldLCB7XG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OXG4gICAgICB9XG4gICAgfSlcbiAgXSk7XG59XG4iXX0=