import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const flipInX = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({
            visibility: 'visible',
            transform: 'perspective(400px) rotate3d(1, 0, 0, {{degrees}}deg)',
            opacity: 0,
            easing: 'ease-in',
            offset: 0
        }),
        style({ transform: 'perspective(400px) rotate3d(1, 0, 0, -20deg)', opacity: 0.5, easing: 'ease-in', offset: 0.4 }),
        style({ transform: 'perspective(400px) rotate3d(1, 0, 0, 10deg)', opacity: 1, easing: 'ease-in', offset: 0.6 }),
        style({ transform: 'perspective(400px) rotate3d(1, 0, 0, -5deg)', easing: 'ease', offset: 0.8 }),
        style({ transform: 'perspective(400px)', easing: 'ease', offset: 1 })
    ]))
]);
const ɵ0 = flipInX;
const DEFAULT_DURATION = 1000;
export function flipInXAnimation(options) {
    return trigger((options && options.anchor) || 'flipInX', [
        transition('0 => 1', [style({ visibility: 'hidden' }), style({ 'backface-visibility': 'visible' }), ...useAnimationIncludingChildren(flipInX(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 90
            }
        })
    ]);
}
export function flipInXOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'flipInXOnEnter', [
        transition(':enter', [style({ visibility: 'hidden' }), style({ 'backface-visibility': 'visible' }), ...useAnimationIncludingChildren(flipInX(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 90
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxpcC1pbi14LmFuaW1hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9mbGlwcGVycy9mbGlwLWluLXguYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUE0QixTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUcxSCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQVczRixNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FDbkIsU0FBUyxDQUFDO0lBQ1IsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixVQUFVLEVBQUUsU0FBUztZQUNyQixTQUFTLEVBQUUsc0RBQXNEO1lBQ2pFLE9BQU8sRUFBRSxDQUFDO1lBQ1YsTUFBTSxFQUFFLFNBQVM7WUFDakIsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO1FBQ0YsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLDhDQUE4QyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDbEgsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLDZDQUE2QyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0csS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLDZDQUE2QyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hHLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN0RSxDQUFDLENBQ0g7Q0FDRixDQUFDLENBQUM7O0FBRUwsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFFOUIsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE9BQWtDO0lBQ2pFLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDdkQsVUFBVSxDQUNSLFFBQVEsRUFDUixDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUNwSTtZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7YUFDNUM7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxPQUFrQztJQUN4RSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEVBQUU7UUFDOUQsVUFBVSxDQUNSLFFBQVEsRUFDUixDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUNwSTtZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7YUFDNUM7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIGFuaW1hdGlvbiwgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLCBrZXlmcmFtZXMsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IElBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgdXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4gfSBmcm9tICcuLi9jb21tb24vdXNlLWFuaW1hdGlvbi1pbmNsdWRpbmctY2hpbGRyZW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGbGlwSW5YQW5pbWF0aW9uT3B0aW9ucyBleHRlbmRzIElBbmltYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEFuZ2xlIC0gbnVtYmVyIG9mIGRlZ3JlZXMgZnJvbSB3aGljaCB0byBzdGFydCBhbmltYXRpb24uXG4gICAqXG4gICAqIERlZmF1bHQgOTBcbiAgICovXG4gIGRlZ3JlZXM/OiBudW1iZXI7XG59XG5cbmNvbnN0IGZsaXBJblggPSAoKSA9PlxuICBhbmltYXRpb24oW1xuICAgIGFuaW1hdGUoXG4gICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwge3tkZWdyZWVzfX1kZWcpJyxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIGVhc2luZzogJ2Vhc2UtaW4nLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9KSxcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICdwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKScsIG9wYWNpdHk6IDAuNSwgZWFzaW5nOiAnZWFzZS1pbicsIG9mZnNldDogMC40IH0pLFxuICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3BlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAxMGRlZyknLCBvcGFjaXR5OiAxLCBlYXNpbmc6ICdlYXNlLWluJywgb2Zmc2V0OiAwLjYgfSksXG4gICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAuOCB9KSxcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICdwZXJzcGVjdGl2ZSg0MDBweCknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgICBdKVxuICAgIClcbiAgXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxpcEluWEFuaW1hdGlvbihvcHRpb25zPzogSUZsaXBJblhBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdmbGlwSW5YJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnMCA9PiAxJyxcbiAgICAgIFtzdHlsZSh7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pLCBzdHlsZSh7ICdiYWNrZmFjZS12aXNpYmlsaXR5JzogJ3Zpc2libGUnIH0pLCAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihmbGlwSW5YKCksIG9wdGlvbnMpXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA5MFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsaXBJblhPbkVudGVyQW5pbWF0aW9uKG9wdGlvbnM/OiBJRmxpcEluWEFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2ZsaXBJblhPbkVudGVyJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnOmVudGVyJyxcbiAgICAgIFtzdHlsZSh7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pLCBzdHlsZSh7ICdiYWNrZmFjZS12aXNpYmlsaXR5JzogJ3Zpc2libGUnIH0pLCAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihmbGlwSW5YKCksIG9wdGlvbnMpXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA5MFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cbiJdfQ==