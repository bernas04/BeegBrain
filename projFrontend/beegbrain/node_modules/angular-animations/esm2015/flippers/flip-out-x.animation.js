import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const flipOutX = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ transform: 'perspective(400px)', opacity: 1, easing: 'ease', offset: 0 }),
        style({ transform: 'perspective(400px) rotate3d(1, 0, 0, -20deg)', opacity: 1, easing: 'ease', offset: 0.3 }),
        style({ transform: 'perspective(400px) rotate3d(1, 0, 0, {{degrees}}deg)', opacity: 0, easing: 'ease', offset: 1 })
    ]))
]);
const ɵ0 = flipOutX;
const DEFAULT_DURATION = 750;
export function flipOutXAnimation(options) {
    return trigger((options && options.anchor) || 'flipOutX', [
        transition('0 => 1', [style({ 'backface-visibility': 'visible' }), ...useAnimationIncludingChildren(flipOutX(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 90
            }
        })
    ]);
}
export function flipOutXOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'flipOutXOnLeave', [
        transition(':leave', [style({ 'backface-visibility': 'visible' }), ...useAnimationIncludingChildren(flipOutX(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 90
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxpcC1vdXQteC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZmxpcHBlcnMvZmxpcC1vdXQteC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQTRCLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBVzNGLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUNwQixTQUFTLENBQUM7SUFDUixPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2pGLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSw4Q0FBOEMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzdHLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxzREFBc0QsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3BILENBQUMsQ0FDSDtDQUNGLENBQUMsQ0FBQzs7QUFFTCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUU3QixNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBbUM7SUFDbkUsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRTtRQUN4RCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUscUJBQXFCLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxHQUFHLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDekgsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELE9BQU8sRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTthQUM1QztTQUNGLENBQUM7S0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QixDQUFDLE9BQW1DO0lBQzFFLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxpQkFBaUIsRUFBRTtRQUMvRCxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUscUJBQXFCLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxHQUFHLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDekgsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELE9BQU8sRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTthQUM1QztTQUNGLENBQUM7S0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgYW5pbWF0aW9uLCBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsIGtleWZyYW1lcywgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgSUFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyB1c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbiB9IGZyb20gJy4uL2NvbW1vbi91c2UtYW5pbWF0aW9uLWluY2x1ZGluZy1jaGlsZHJlbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZsaXBPdXRYQW5pbWF0aW9uT3B0aW9ucyBleHRlbmRzIElBbmltYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEFuZ2xlIC0gbnVtYmVyIG9mIGRlZ3JlZXMgYXQgd2hpY2ggZW5kIGFuaW1hdGlvbi5cbiAgICpcbiAgICogRGVmYXVsdCA5MFxuICAgKi9cbiAgZGVncmVlcz86IG51bWJlcjtcbn1cblxuY29uc3QgZmxpcE91dFggPSAoKSA9PlxuICBhbmltYXRpb24oW1xuICAgIGFuaW1hdGUoXG4gICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICdwZXJzcGVjdGl2ZSg0MDBweCknLCBvcGFjaXR5OiAxLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAwIH0pLFxuICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3BlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpJywgb3BhY2l0eTogMSwgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMC4zIH0pLFxuICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3BlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCB7e2RlZ3JlZXN9fWRlZyknLCBvcGFjaXR5OiAwLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgICBdKVxuICAgIClcbiAgXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSA3NTA7XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGlwT3V0WEFuaW1hdGlvbihvcHRpb25zPzogSUZsaXBPdXRYQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAnZmxpcE91dFgnLCBbXG4gICAgdHJhbnNpdGlvbignMCA9PiAxJywgW3N0eWxlKHsgJ2JhY2tmYWNlLXZpc2liaWxpdHknOiAndmlzaWJsZScgfSksIC4uLnVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuKGZsaXBPdXRYKCksIG9wdGlvbnMpXSwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA5MFxuICAgICAgfVxuICAgIH0pXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxpcE91dFhPbkxlYXZlQW5pbWF0aW9uKG9wdGlvbnM/OiBJRmxpcE91dFhBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdmbGlwT3V0WE9uTGVhdmUnLCBbXG4gICAgdHJhbnNpdGlvbignOmxlYXZlJywgW3N0eWxlKHsgJ2JhY2tmYWNlLXZpc2liaWxpdHknOiAndmlzaWJsZScgfSksIC4uLnVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuKGZsaXBPdXRYKCksIG9wdGlvbnMpXSwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA5MFxuICAgICAgfVxuICAgIH0pXG4gIF0pO1xufVxuIl19