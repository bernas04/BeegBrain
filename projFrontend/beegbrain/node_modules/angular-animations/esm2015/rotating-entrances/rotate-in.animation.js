import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const rotateIn = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ visibility: 'visible', opacity: 0, transform: 'rotate({{degrees}}deg)', easing: 'ease', offset: 0 }),
        style({ opacity: 1, transform: 'rotate(0deg)', easing: 'ease', offset: 1 })
    ]))
]);
const ɵ0 = rotateIn;
const DEFAULT_DURATION = 1000;
export function rotateInAnimation(options) {
    return trigger((options && options.anchor) || 'rotateIn', [
        transition('0 => 1', [style({ visibility: 'hidden' }), style({ 'transform-origin': 'center' }), ...useAnimationIncludingChildren(rotateIn(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || -200
            }
        })
    ]);
}
export function rotateInOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'rotateInOnEnter', [
        transition(':enter', [style({ visibility: 'hidden' }), style({ 'transform-origin': 'center' }), ...useAnimationIncludingChildren(rotateIn(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || -200
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLWluLmFuaW1hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9yb3RhdGluZy1lbnRyYW5jZXMvcm90YXRlLWluLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBNEIsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHMUgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFXM0YsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQ3BCLFNBQVMsQ0FBQztJQUNSLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM1RyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDNUUsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDOztBQUVMLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUFtQztJQUNuRSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFFO1FBQ3hELFVBQVUsQ0FDUixRQUFRLEVBQ1IsQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsNkJBQTZCLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFDakk7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUc7YUFDOUM7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxPQUFtQztJQUMxRSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksaUJBQWlCLEVBQUU7UUFDL0QsVUFBVSxDQUNSLFFBQVEsRUFDUixDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUNqSTtZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRzthQUM5QztTQUNGLENBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgYW5pbWF0aW9uLCBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsIGtleWZyYW1lcywgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgSUFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyB1c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbiB9IGZyb20gJy4uL2NvbW1vbi91c2UtYW5pbWF0aW9uLWluY2x1ZGluZy1jaGlsZHJlbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvdGF0ZUluQW5pbWF0aW9uT3B0aW9ucyBleHRlbmRzIElBbmltYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEFuZ2xlIC0gbnVtYmVyIG9mIGRlZ3JlZXMgZnJvbSB3aGljaCB0byBzdGFydCBhbmltYXRpb24uXG4gICAqXG4gICAqIERlZmF1bHQgLTIwMFxuICAgKi9cbiAgZGVncmVlcz86IG51bWJlcjtcbn1cblxuY29uc3Qgcm90YXRlSW4gPSAoKSA9PlxuICBhbmltYXRpb24oW1xuICAgIGFuaW1hdGUoXG4gICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3JvdGF0ZSh7e2RlZ3JlZXN9fWRlZyknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAwIH0pLFxuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDEgfSlcbiAgICAgIF0pXG4gICAgKVxuICBdKTtcblxuY29uc3QgREVGQVVMVF9EVVJBVElPTiA9IDEwMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVJbkFuaW1hdGlvbihvcHRpb25zPzogSVJvdGF0ZUluQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAncm90YXRlSW4nLCBbXG4gICAgdHJhbnNpdGlvbihcbiAgICAgICcwID0+IDEnLFxuICAgICAgW3N0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSksIHN0eWxlKHsgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnY2VudGVyJyB9KSwgLi4udXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4ocm90YXRlSW4oKSwgb3B0aW9ucyldLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgICBkZWdyZWVzOiAob3B0aW9ucyAmJiBvcHRpb25zLmRlZ3JlZXMpIHx8IC0yMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVJbk9uRW50ZXJBbmltYXRpb24ob3B0aW9ucz86IElSb3RhdGVJbkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ3JvdGF0ZUluT25FbnRlcicsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzplbnRlcicsXG4gICAgICBbc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSwgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdjZW50ZXInIH0pLCAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihyb3RhdGVJbigpLCBvcHRpb25zKV0sXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OLFxuICAgICAgICAgIGRlZ3JlZXM6IChvcHRpb25zICYmIG9wdGlvbnMuZGVncmVlcykgfHwgLTIwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cbiJdfQ==