import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const rotateInDownRight = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ visibility: 'visible', opacity: 0, transform: 'rotate3d(0, 0, 1, {{degrees}}deg)', easing: 'ease', offset: 0 }),
        style({ opacity: 1, transform: 'rotate3d(0, 0, 1, 0deg)', easing: 'ease', offset: 1 })
    ]))
]);
const ɵ0 = rotateInDownRight;
const DEFAULT_DURATION = 1000;
export function rotateInDownRightAnimation(options) {
    return trigger((options && options.anchor) || 'rotateInDownRight', [
        transition('0 => 1', [
            style({ visibility: 'hidden' }),
            style({ 'transform-origin': 'right bottom' }),
            ...useAnimationIncludingChildren(rotateInDownRight(), options)
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 45
            }
        })
    ]);
}
export function rotateInDownRightOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'rotateInDownRightOnEnter', [
        transition(':enter', [
            style({ visibility: 'hidden' }),
            style({ 'transform-origin': 'right bottom' }),
            ...useAnimationIncludingChildren(rotateInDownRight(), options)
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 45
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLWluLWRvd24tcmlnaHQuYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3JvdGF0aW5nLWVudHJhbmNlcy9yb3RhdGUtaW4tZG93bi1yaWdodC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQTRCLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBVzNGLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFLENBQzdCLFNBQVMsQ0FBQztJQUNSLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2SCxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN2RixDQUFDLENBQ0g7Q0FDRixDQUFDLENBQUM7O0FBRUwsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFFOUIsTUFBTSxVQUFVLDBCQUEwQixDQUFDLE9BQTRDO0lBQ3JGLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsRUFBRTtRQUNqRSxVQUFVLENBQ1IsUUFBUSxFQUNSO1lBQ0UsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO1lBQy9CLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxDQUFDO1lBQzdDLEdBQUcsNkJBQTZCLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxPQUFPLENBQUM7U0FDL0QsRUFDRDtZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7YUFDNUM7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxpQ0FBaUMsQ0FBQyxPQUE0QztJQUM1RixPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksMEJBQTBCLEVBQUU7UUFDeEUsVUFBVSxDQUNSLFFBQVEsRUFDUjtZQUNFLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUMvQixLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsQ0FBQztZQUM3QyxHQUFHLDZCQUE2QixDQUFDLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxDQUFDO1NBQy9ELEVBQ0Q7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2FBQzVDO1NBQ0YsQ0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBhbmltYXRpb24sIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSwga2V5ZnJhbWVzLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBJQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHVzZUFuaW1hdGlvbkluY2x1ZGluZ0NoaWxkcmVuIH0gZnJvbSAnLi4vY29tbW9uL3VzZS1hbmltYXRpb24taW5jbHVkaW5nLWNoaWxkcmVuJztcblxuZXhwb3J0IGludGVyZmFjZSBJUm90YXRlSW5Eb3duUmlnaHRBbmltYXRpb25PcHRpb25zIGV4dGVuZHMgSUFuaW1hdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogQW5nbGUgLSBudW1iZXIgb2YgZGVncmVlcyBmcm9tIHdoaWNoIHRvIHN0YXJ0IGFuaW1hdGlvbi5cbiAgICpcbiAgICogRGVmYXVsdCA0NVxuICAgKi9cbiAgZGVncmVlcz86IG51bWJlcjtcbn1cblxuY29uc3Qgcm90YXRlSW5Eb3duUmlnaHQgPSAoKSA9PlxuICBhbmltYXRpb24oW1xuICAgIGFuaW1hdGUoXG4gICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIHt7ZGVncmVlc319ZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAncm90YXRlM2QoMCwgMCwgMSwgMGRlZyknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgICBdKVxuICAgIClcbiAgXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlSW5Eb3duUmlnaHRBbmltYXRpb24ob3B0aW9ucz86IElSb3RhdGVJbkRvd25SaWdodEFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ3JvdGF0ZUluRG93blJpZ2h0JywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnMCA9PiAxJyxcbiAgICAgIFtcbiAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSxcbiAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdyaWdodCBib3R0b20nIH0pLFxuICAgICAgICAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihyb3RhdGVJbkRvd25SaWdodCgpLCBvcHRpb25zKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA0NVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUluRG93blJpZ2h0T25FbnRlckFuaW1hdGlvbihvcHRpb25zPzogSVJvdGF0ZUluRG93blJpZ2h0QW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAncm90YXRlSW5Eb3duUmlnaHRPbkVudGVyJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnOmVudGVyJyxcbiAgICAgIFtcbiAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSxcbiAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdyaWdodCBib3R0b20nIH0pLFxuICAgICAgICAuLi51c2VBbmltYXRpb25JbmNsdWRpbmdDaGlsZHJlbihyb3RhdGVJbkRvd25SaWdodCgpLCBvcHRpb25zKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCA0NVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cbiJdfQ==