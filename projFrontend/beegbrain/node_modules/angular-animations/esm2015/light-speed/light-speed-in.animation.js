import { animate, animation, keyframes, style, transition, trigger } from '@angular/animations';
import { useAnimationIncludingChildren } from '../common/use-animation-including-children';
const lightSpeedIn = () => animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({
            visibility: 'visible',
            opacity: 0,
            transform: 'translate3d({{translate}}, 0, 0) skewX(-30deg)',
            easing: 'ease-out',
            offset: 0
        }),
        style({ opacity: 1, transform: 'skewX(20deg)', easing: 'ease-out', offset: 0.6 }),
        style({ opacity: 1, transform: 'skewX(-5deg)', easing: 'ease-out', offset: 0.8 }),
        style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease-out', offset: 1 })
    ]))
]);
const ɵ0 = lightSpeedIn;
const DEFAULT_DURATION = 1000;
export function lightSpeedInAnimation(options) {
    return trigger((options && options.anchor) || 'lightSpeedIn', [
        transition('0 => 1', [style({ visibility: 'hidden' }), ...useAnimationIncludingChildren(lightSpeedIn(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '100%'
            }
        })
    ]);
}
export function lightSpeedInOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'lightSpeedInOnEnter', [
        transition(':enter', [style({ visibility: 'hidden' }), ...useAnimationIncludingChildren(lightSpeedIn(), options)], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '100%'
            }
        })
    ]);
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHQtc3BlZWQtaW4uYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2xpZ2h0LXNwZWVkL2xpZ2h0LXNwZWVkLWluLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBNEIsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHMUgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFXM0YsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFLENBQ3hCLFNBQVMsQ0FBQztJQUNSLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDO1lBQ0osVUFBVSxFQUFFLFNBQVM7WUFDckIsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsZ0RBQWdEO1lBQzNELE1BQU0sRUFBRSxVQUFVO1lBQ2xCLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQztRQUNGLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNqRixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDakYsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDeEYsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDOztBQUVMLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxPQUF1QztJQUMzRSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksY0FBYyxFQUFFO1FBQzVELFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLDZCQUE2QixDQUFDLFlBQVksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDakgsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELFNBQVMsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTTthQUNwRDtTQUNGLENBQUM7S0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLE9BQXVDO0lBQ2xGLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxxQkFBcUIsRUFBRTtRQUNuRSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ2pILE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxTQUFTLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07YUFDcEQ7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIGFuaW1hdGlvbiwgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLCBrZXlmcmFtZXMsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IElBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgdXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4gfSBmcm9tICcuLi9jb21tb24vdXNlLWFuaW1hdGlvbi1pbmNsdWRpbmctY2hpbGRyZW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMaWdodFNwZWVkSW5BbmltYXRpb25PcHRpb25zIGV4dGVuZHMgSUFuaW1hdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogVHJhbnNsYXRlLCBwb3NzaWJsZSB1bml0czogcHgsICUsIGVtLCByZW0sIHZ3LCB2aFxuICAgKlxuICAgKiBEZWZhdWx0OiAxMDAlXG4gICAqL1xuICB0cmFuc2xhdGU/OiBzdHJpbmc7XG59XG5cbmNvbnN0IGxpZ2h0U3BlZWRJbiA9ICgpID0+XG4gIGFuaW1hdGlvbihbXG4gICAgYW5pbWF0ZShcbiAgICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAgICBrZXlmcmFtZXMoW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2Qoe3t0cmFuc2xhdGV9fSwgMCwgMCkgc2tld1goLTMwZGVnKScsXG4gICAgICAgICAgZWFzaW5nOiAnZWFzZS1vdXQnLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9KSxcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdza2V3WCgyMGRlZyknLCBlYXNpbmc6ICdlYXNlLW91dCcsIG9mZnNldDogMC42IH0pLFxuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3NrZXdYKC01ZGVnKScsIGVhc2luZzogJ2Vhc2Utb3V0Jywgb2Zmc2V0OiAwLjggfSksXG4gICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknLCBlYXNpbmc6ICdlYXNlLW91dCcsIG9mZnNldDogMSB9KVxuICAgICAgXSlcbiAgICApXG4gIF0pO1xuXG5jb25zdCBERUZBVUxUX0RVUkFUSU9OID0gMTAwMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0U3BlZWRJbkFuaW1hdGlvbihvcHRpb25zPzogSUxpZ2h0U3BlZWRJbkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2xpZ2h0U3BlZWRJbicsIFtcbiAgICB0cmFuc2l0aW9uKCcwID0+IDEnLCBbc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSwgLi4udXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4obGlnaHRTcGVlZEluKCksIG9wdGlvbnMpXSwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzEwMCUnXG4gICAgICB9XG4gICAgfSlcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodFNwZWVkSW5PbkVudGVyQW5pbWF0aW9uKG9wdGlvbnM/OiBJTGlnaHRTcGVlZEluQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAnbGlnaHRTcGVlZEluT25FbnRlcicsIFtcbiAgICB0cmFuc2l0aW9uKCc6ZW50ZXInLCBbc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSwgLi4udXNlQW5pbWF0aW9uSW5jbHVkaW5nQ2hpbGRyZW4obGlnaHRTcGVlZEluKCksIG9wdGlvbnMpXSwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzEwMCUnXG4gICAgICB9XG4gICAgfSlcbiAgXSk7XG59XG4iXX0=