"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const testing_1 = require("@angular-devkit/schematics/testing");
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
const SchematicsTemplateManager_1 = require("../SchematicsTemplateManager");
const NgFileSystem_1 = require("../utils/NgFileSystem");
describe("Schematics upgrade-packages", () => {
    // tslint:disable: object-literal-sort-keys
    let appTree;
    const collectionPath = path.join(__dirname, "../collection.json");
    const schematicName = "upgrade-packages";
    beforeAll(() => {
        spyOn(cli_core_1.GoogleAnalytics, "post");
        appTree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
    });
    it("calls project template upgradeIgniteUIPackages and schedules install accordingly", (done) => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const mockConfig = {
            customTemplates: [],
            project: {
                framework: "mock-ng",
                projectType: "mock-igx-ts",
                projectTemplate: "mock-side-nav"
            }
        };
        spyOn(cli_core_1.ProjectConfig, "getConfig").and.returnValue(mockConfig);
        const mockProjTemplate = {
            upgradeIgniteUIPackages: () => __awaiter(void 0, void 0, void 0, function* () { return true; })
        };
        const upgradeSpy = spyOn(mockProjTemplate, "upgradeIgniteUIPackages");
        const mockLib = {
            getProject: jasmine.createSpy().and.returnValue(mockProjTemplate),
            hasProject: jasmine.createSpy().and.returnValue(false),
            projectIds: ["another-mock"]
        };
        const projLibSpy = spyOn(SchematicsTemplateManager_1.SchematicsTemplateManager.prototype, "getProjectLibrary");
        projLibSpy.and.returnValue(mockLib);
        upgradeSpy.and.returnValue(Promise.resolve(false));
        yield runner.runSchematicAsync(schematicName, {}, appTree).toPromise();
        expect(cli_core_1.GoogleAnalytics.post).toHaveBeenCalledWith({
            t: "screenview",
            cd: "Upgrade packages"
        });
        expect(projLibSpy).toHaveBeenCalledWith("mock-ng", "mock-igx-ts");
        expect(mockLib.hasProject).toHaveBeenCalledWith("mock-side-nav");
        expect(mockLib.getProject).toHaveBeenCalledWith("another-mock");
        expect(cli_core_1.App.container.get(cli_core_1.FS_TYPE_TOKEN)).toEqual(cli_core_1.FsTypes.virtual, "setVirtual not called");
        expect(cli_core_1.App.container.get(cli_core_1.FS_TOKEN)).toEqual(jasmine.any(NgFileSystem_1.NgTreeFileSystem));
        expect(upgradeSpy).toHaveBeenCalledTimes(1);
        expect(upgradeSpy).toHaveBeenCalledWith("", "");
        expect(runner.tasks).toEqual([]);
        upgradeSpy.and.returnValue(Promise.resolve(true));
        yield runner.runSchematicAsync(schematicName, { skipInstall: true }, appTree).toPromise();
        expect(upgradeSpy).toHaveBeenCalledTimes(2);
        expect(runner.tasks).toEqual([]);
        yield runner.runSchematicAsync(schematicName, {}, appTree).toPromise();
        expect(upgradeSpy).toHaveBeenCalledTimes(3);
        const installTaskOptions = new tasks_1.NodePackageInstallTask().toConfiguration();
        expect(runner.tasks).toContain(jasmine.objectContaining(installTaskOptions));
        done();
    }));
});
