"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const scoped_1 = require("@angular-devkit/schematics/src/tree/scoped");
const cli_core_1 = require("@igniteui/cli-core");
const rxjs_1 = require("rxjs");
const NgFileSystem_1 = require("../utils/NgFileSystem");
function default_1(options) {
    return (tree, _context) => {
        return (0, rxjs_1.defer)(() => __awaiter(this, void 0, void 0, function* () {
            // TODO: ScopedTree iffy import
            (0, NgFileSystem_1.setVirtual)(options.directory ? new scoped_1.ScopedTree(tree, options.directory) : tree);
            const config = cli_core_1.ProjectConfig.getConfig();
            // TODO: call in ng serve directly somehow?
            yield cli_core_1.Util.execSync(`npm start -- --port=${config.project.defaultPort}`, { cwd: options.directory, stdio: "inherit", killSignal: "SIGINT" });
            return tree;
        }));
    };
}
exports.default = default_1;
