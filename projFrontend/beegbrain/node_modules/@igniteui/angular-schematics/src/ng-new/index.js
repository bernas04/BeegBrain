"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newProject = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const cli_core_1 = require("@igniteui/cli-core");
const rxjs_1 = require("rxjs");
const SchematicsPromptSession_1 = require("../prompt/SchematicsPromptSession");
const SchematicsTemplateManager_1 = require("../SchematicsTemplateManager");
const NgFileSystem_1 = require("../utils/NgFileSystem");
function newProject(options) {
    return (_host, _hostContext) => {
        cli_core_1.App.initialize("angular-cli");
        cli_core_1.GoogleAnalytics.post({
            t: "screenview",
            cd: "New"
        });
        let projLibrary;
        let projectOptions;
        const templateManager = new SchematicsTemplateManager_1.SchematicsTemplateManager();
        const prompt = new SchematicsPromptSession_1.SchematicsPromptSession(templateManager);
        // TODO:
        const defaultProjName = "IG Project";
        let nameProvided = false;
        let projTemplate;
        return (0, schematics_1.chain)([
            (tree, _context) => {
                return (0, rxjs_1.defer)(() => __awaiter(this, void 0, void 0, function* () {
                    if (options.name) {
                        options.name = options.name.trim();
                        nameProvided = true;
                        // letter+alphanumeric check
                        if (!cli_core_1.Util.isAlphanumericExt(options.name)) {
                            throw new schematics_1.SchematicsException(`Name '${options.name}' is not valid. `
                                + "Name should start with a letter and can also contain numbers, dashes and spaces.");
                        }
                    }
                    if (cli_core_1.Util.directoryExists(options.name)) {
                        throw new schematics_1.SchematicsException(`Folder "${options.name}" already exists!`);
                    }
                    const framework = templateManager.getFrameworkByName("angular");
                    projLibrary = yield prompt.getProjectLibrary(framework);
                    if (!options.name || !prompt.nameIsValid(options.name)) {
                        options.name = yield prompt.getUserInput({
                            type: "input",
                            name: "projectName",
                            message: "Enter a name for your project:",
                            default: cli_core_1.Util.getAvailableName(defaultProjName, true),
                            validate: prompt.nameIsValid
                        });
                        nameProvided = false;
                        projTemplate = yield prompt.getProjectTemplate(projLibrary);
                        options.theme = yield prompt.getTheme(projLibrary);
                    }
                    let themeIndex = 0;
                    if (options.theme) {
                        themeIndex = projLibrary.themes.findIndex(item => options.theme.toLowerCase() === item.toLowerCase());
                        if (themeIndex === -1) {
                            throw new schematics_1.SchematicsException(`Theme not supported`);
                        }
                    }
                    if (projTemplate === undefined) {
                        const projectTemplate = options.template || projLibrary.projectIds[0];
                        projTemplate = projLibrary.getProject(projectTemplate);
                        if (!projTemplate) {
                            throw new schematics_1.SchematicsException(`template with id '${options.template}' not found`);
                        }
                    }
                    const theme = projLibrary.themes[themeIndex];
                    cli_core_1.Util.log(`Project Name: ${options.name}, theme ${theme}`);
                    // project options:
                    // cache available views and components, same as in component Schematic
                    const components = projLibrary.components;
                    const views = projLibrary.customTemplates;
                    projectOptions = {
                        projTemplate,
                        theme,
                        name: options.name
                    };
                    cli_core_1.GoogleAnalytics.post({
                        t: "event",
                        ec: "$ng new",
                        ea: `project name: ${options.name}; framework: ${projTemplate.framework}; ` +
                            `project type: ${projTemplate.projectType}; theme: ${theme}; skip-git: ${!!options.skipGit}`,
                        cd1: projTemplate.framework,
                        cd2: projTemplate.projectType,
                        cd3: options.name,
                        cd11: !!options.skipGit,
                        cd14: theme
                    });
                    return tree;
                }));
            },
            (0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.empty)(), [
                // TODO: Task chain based on @schematics/angular ng-new schematic
                // externalSchematic("@schematics/angular", "workspace", { name: options.name }),
                // externalSchematic("@schematics/angular", "application", {
                // 	projectRoot: "", name: options.name, skipInstall: true, routing: true, style: "scss"
                // }),
                (tree, _context) => {
                    (0, NgFileSystem_1.setVirtual)(tree);
                    // extend project entry point:
                    return (0, schematics_1.schematic)("app-projects", projectOptions);
                },
                (tree, _context) => {
                    // extend project entry point:
                    // tree.create("ignite-ui-cli.json", JSON.stringify({ theme: context.theme }));
                    if (tree.exists("gitignore")) {
                        tree.rename("gitignore", ".gitignore");
                    }
                },
                (tree, context) => {
                    if (!nameProvided) {
                        return (0, rxjs_1.defer)(() => __awaiter(this, void 0, void 0, function* () {
                            prompt.setContext(context, tree, options.name);
                            yield prompt.chooseActionLoop(projLibrary);
                            return tree;
                        }));
                    }
                },
                (_tree, _context) => {
                    return (0, schematics_1.move)(options.name);
                }
            ]), schematics_1.MergeStrategy.Overwrite),
            (tree, _context) => {
                if (prompt.userAnswers && prompt.userAnswers.get("upgradePackages")) {
                    return (0, rxjs_1.defer)(() => __awaiter(this, void 0, void 0, function* () {
                        (0, NgFileSystem_1.setVirtual)(tree);
                        yield projectOptions.projTemplate.upgradeIgniteUIPackages(options.name || "", "");
                        return tree;
                    }));
                }
            },
            (tree, context) => {
                const installChain = [];
                if (!options.skipInstall) {
                    const installTask = context.addTask(new tasks_1.NodePackageInstallTask(options.name), [...installChain]);
                    installChain.push(installTask);
                }
                if (!options.skipGit) {
                    const gitTask = context.addTask(new tasks_1.RepositoryInitializerTask(options.name, { message: `Initial commit for project: ${options.name}` }), [...installChain] //copy
                    );
                    installChain.push(gitTask);
                }
                if (!options.skipInstall && !nameProvided) {
                    context.addTask(new tasks_1.RunSchematicTask("start", { directory: options.name }), installChain);
                }
                return tree;
            }
        ]);
    };
}
exports.newProject = newProject;
