"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
const SchematicsTemplateManager_1 = require("../SchematicsTemplateManager");
const collectionPath = path.join(__dirname, "../collection.json");
describe("component", () => {
    beforeAll(() => {
        spyOn(cli_core_1.GoogleAnalytics, "post");
    });
    it("works", done => {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const mockInst = {
            generateConfig: jasmine.createSpy(),
            packages: [],
            registerInProject: jasmine.createSpy(),
            templatePaths: []
        };
        const mockLib = {
            getCustomTemplates: () => { },
            getTemplateById: jasmine.createSpy().and.returnValue(mockInst),
            hasTemplate: jasmine.createSpy().and.returnValue(true)
        };
        const projLibSpy = spyOn(SchematicsTemplateManager_1.SchematicsTemplateManager.prototype, "getProjectLibrary");
        projLibSpy.and.returnValue(mockLib);
        const mockConfig = {
            customTemplates: ["path:C:\work\GitHub\ignite-ui-cli\output\custom-templ"],
            project: {
                theme: "Custom"
            }
        };
        const projConfigSpy = spyOn(cli_core_1.ProjectConfig, "getConfig");
        projConfigSpy.and.returnValue(mockConfig);
        const tree = runner.runSchematicAsync("component", { name: "my-combo", template: "combo", templateInst: mockInst, skipRoute: false }, schematics_1.Tree.empty());
        tree.subscribe(state => {
            expect(mockInst.generateConfig).toHaveBeenCalledWith("my-combo", {});
            expect(mockInst.registerInProject).toHaveBeenCalledWith("", "my-combo", { skipRoute: false, modulePath: undefined });
            expect(projLibSpy).toHaveBeenCalledWith("angular", "igx-ts");
            expect(mockLib.hasTemplate).toHaveBeenCalledWith("combo");
            expect(mockLib.getTemplateById).toHaveBeenCalledWith("combo");
            expect(state.files).toEqual([]);
            done();
        });
    });
});
