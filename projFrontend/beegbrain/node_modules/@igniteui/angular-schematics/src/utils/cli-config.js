"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCliConfig = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const cli_core_1 = require("@igniteui/cli-core");
function createCliConfig() {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        context.logger.info(``);
        context.logger.warn(`Ignite UI for Angular Schematics installed`);
        context.logger.info(`- generate components using 'ng g @igniteui/angular-schematics:c'`);
        context.logger.info(`- to use as 'ng new' collection install globally 'npm i -g @igniteui/angular-schematics'`);
        context.logger.info(`Learn more: ` + cli_core_1.Util.color(`https://www.infragistics.com/products/ignite-ui-angular/angular/components/general/cli-overview.html`, "white"));
        context.logger.info(``);
        const config = yield GetCliConfig(tree);
        tree.create("ignite-ui-cli.json", JSON.stringify(config, null, 2) + "\n");
    });
}
exports.createCliConfig = createCliConfig;
function GetCliConfig(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        let workspace;
        try {
            ({ workspace } = yield core_1.workspaces.readWorkspace("/", (0, cli_core_1.createWorkspaceHost)(tree)));
        }
        catch (e) {
            if (e.toString().includes("Could not find (undefined)")) {
                throw new schematics_1.SchematicsException("angular.json was not found in the project's root");
            }
            throw new Error(e.message);
        }
        const cliConfig = require("../cli-config/files/ignite-ui-cli.json");
        cliConfig.version = cli_core_1.Util.version();
        const userPort = getPort(workspace);
        if (userPort) {
            cliConfig.project.defaultPort = userPort;
        }
        return cliConfig;
    });
}
function getPort(workspace) {
    var _a;
    const project = workspace.extensions.defaultProject ?
        workspace.projects.get(workspace.extensions.defaultProject) :
        workspace.projects.values().next().value;
    const projectServe = (_a = project === null || project === void 0 ? void 0 : project.targets.get("serve")) === null || _a === void 0 ? void 0 : _a.options;
    if (projectServe) {
        return projectServe.port;
    }
}
