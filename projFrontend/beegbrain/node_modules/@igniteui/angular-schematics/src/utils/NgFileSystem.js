"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVirtual = exports.NgTreeFileSystem = void 0;
const cli_core_1 = require("@igniteui/cli-core");
class NgTreeFileSystem {
    constructor(tree) {
        this.tree = tree;
    }
    fileExists(filePath) {
        return this.tree.exists(filePath);
    }
    readFile(filePath, encoding) {
        return (this.tree.read(filePath) || "").toString();
    }
    writeFile(filePath, text) {
        return this.tree.overwrite(filePath, text);
    }
    directoryExists(dirPath) {
        const dir = this.tree.getDir(dirPath);
        return dir.subdirs.length || dir.subfiles.length ? true : false;
    }
    /**
     * Returns a list of file paths under a directory based on a match pattern
     * @param dirPath Root dir to search in
     * @param pattern Supports only recursive wildcard '\*\*\/\*'
     */
    glob(dirPath, pattern) {
        const dir = this.tree.getDir(dirPath);
        const entries = [];
        pattern = pattern.split("**/*").pop() || pattern;
        dir.visit((_fullPath, entry) => {
            if (entry === null || entry === void 0 ? void 0 : entry.path.endsWith(pattern)) {
                entries.push(entry.path);
            }
        });
        return entries;
    }
}
exports.NgTreeFileSystem = NgTreeFileSystem;
function setVirtual(tree) {
    cli_core_1.App.container.set(cli_core_1.FS_TOKEN, new NgTreeFileSystem(tree));
    cli_core_1.App.container.set(cli_core_1.FS_TYPE_TOKEN, cli_core_1.FsTypes.virtual);
}
exports.setVirtual = setVirtual;
