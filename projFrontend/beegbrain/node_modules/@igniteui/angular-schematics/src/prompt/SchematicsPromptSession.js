"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchematicsPromptSession = void 0;
const cli_core_1 = require("@igniteui/cli-core");
const rxjs_1 = require("rxjs");
class SchematicsPromptSession extends cli_core_1.BasePromptSession {
    constructor(templateManager) {
        super(templateManager);
        this.config = cli_core_1.ProjectConfig.getConfig();
    }
    setContext(context, tree, projectName) {
        this.context = context;
        this.tree = tree;
        this.projectName = projectName;
        this.userAnswers = new Map();
    }
    getUserInput(options, withBackChoice = false) {
        const _super = Object.create(null, {
            getUserInput: { get: () => super.getUserInput }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.getUserInput.call(this, options, withBackChoice);
        });
    }
    getProjectLibrary(framework) {
        const _super = Object.create(null, {
            getProjectLibrary: { get: () => super.getProjectLibrary }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.getProjectLibrary.call(this, framework);
        });
    }
    getProjectTemplate(projectLibrary) {
        const _super = Object.create(null, {
            getProjectTemplate: { get: () => super.getProjectTemplate }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.getProjectTemplate.call(this, projectLibrary);
        });
    }
    getTheme(projectLibrary) {
        const _super = Object.create(null, {
            getTheme: { get: () => super.getTheme }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.getTheme.call(this, projectLibrary);
        });
    }
    nameIsValid(name, checkFolder = true) {
        return super.nameIsValid(name, checkFolder);
    }
    completeAndRun(_port) {
        // TODO?
    }
    upgradePackages() {
        return __awaiter(this, void 0, void 0, function* () {
            this.userAnswers.set("upgradePackages", true);
        });
    }
    templateSelectedTask(type = "component") {
        return (_runner, context) => __awaiter(this, void 0, void 0, function* () {
            if (!context.template) {
                return false;
            }
            const name = yield this.chooseTemplateName(context.template, type);
            if (context.template.hasExtraConfiguration) {
                yield this.customizeTemplateTask(context.template);
            }
            const options = {
                name,
                projectName: this.projectName,
                templateInst: context.template
            };
            const schematic = this.context.schematic.collection.createSchematic("single-component");
            yield schematic.call(options, (0, rxjs_1.of)(this.tree), this.context).toPromise();
            return true;
        });
    }
}
exports.SchematicsPromptSession = SchematicsPromptSession;
