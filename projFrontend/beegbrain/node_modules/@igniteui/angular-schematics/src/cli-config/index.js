"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const angular_templates_1 = require("@igniteui/angular-templates");
const cli_core_1 = require("@igniteui/cli-core");
const cli_config_1 = require("../utils/cli-config");
const NgFileSystem_1 = require("../utils/NgFileSystem");
const theme_import_1 = require("../utils/theme-import");
function getDependencyVersion(pkg, tree) {
    const targetFile = "/package.json";
    if (tree.exists(targetFile)) {
        const sourceText = tree.read(targetFile).toString();
        const json = JSON.parse(sourceText);
        let targetDep;
        if (json.dependencies[pkg]) {
            targetDep = json.dependencies[pkg];
        }
        else if (json.devDependencies[pkg]) {
            targetDep = json.devDependencies[pkg];
        }
        else {
            targetDep = json.peerDependencies[pkg];
        }
        if (!targetDep) {
            throw new core_1.DependencyNotFoundException();
        }
        return targetDep;
    }
    throw new schematics_1.FileDoesNotExistException(`${tree.root.path}/${targetFile}`);
}
function displayVersionMismatch() {
    return (tree, context) => {
        const igxPackage = (0, angular_templates_1.resolveIgxPackage)(angular_templates_1.NPM_PACKAGE);
        const pkgJson = JSON.parse(tree.read(`/node_modules/${igxPackage}/package.json`).toString());
        const ngKey = "@angular/core";
        const ngCommonKey = "@angular/common";
        const ngCoreProjVer = getDependencyVersion(ngKey, tree);
        const ngCommonProjVer = getDependencyVersion(ngCommonKey, tree);
        const ngCoreVer = pkgJson.peerDependencies[ngKey];
        const ngCommonVer = pkgJson.peerDependencies[ngCommonKey];
        if (ngCoreProjVer < ngCoreVer || ngCommonProjVer < ngCommonVer) {
            context.logger.warn(`
WARNING Version mismatch detected - ${igxPackage} is built against a newer version of @angular/core (${ngCoreVer}).
Running 'ng update' will prevent potential version conflicts.\n`);
        }
    };
}
function addTypographyToProj() {
    return (tree) => {
        (0, cli_core_1.addClassToBody)(tree, "igx-typography");
        (0, cli_core_1.addClassToBody)(tree, "igx-scrollbar");
    };
}
function importBrowserAnimations() {
    return (tree) => __awaiter(this, void 0, void 0, function* () {
        const project = yield (0, theme_import_1.getDefaultProject)(tree);
        const moduleFile = `${project.sourceRoot}/app/app.module.ts`;
        if (tree.exists(moduleFile)) {
            const mainModule = new cli_core_1.TypeScriptFileUpdate(moduleFile);
            mainModule.addNgModuleMeta({ import: "BrowserAnimationsModule", from: "@angular/platform-browser/animations" });
            mainModule.finalize();
        }
    });
}
function importStyles() {
    return (tree) => __awaiter(this, void 0, void 0, function* () {
        yield (0, theme_import_1.addFontsToIndexHtml)(tree);
        yield (0, theme_import_1.importDefaultTheme)(tree);
    });
}
// tslint:disable-next-line:space-before-function-paren
function default_1() {
    return (tree) => {
        (0, NgFileSystem_1.setVirtual)(tree);
        return (0, schematics_1.chain)([
            importStyles(),
            addTypographyToProj(),
            importBrowserAnimations(),
            (0, cli_config_1.createCliConfig)(),
            displayVersionMismatch()
        ]);
    };
}
exports.default = default_1;
