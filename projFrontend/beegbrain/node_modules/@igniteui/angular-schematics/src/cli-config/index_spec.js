"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const angular_templates_1 = require("@igniteui/angular-templates");
describe("cli-config schematic", () => {
    const collectionPath = path.join(__dirname, "../collection.json");
    const runner = new testing_1.SchematicTestRunner("cli-schematics", collectionPath);
    let tree;
    const sourceRoot = "src";
    // tslint:disable: object-literal-sort-keys
    const ngJsonConfig = {
        defaultProject: "testProj",
        projects: {
            testProj: {
                sourceRoot,
                architect: {
                    build: {
                        options: {
                            main: `${sourceRoot}/main.ts`,
                            polyfills: `${sourceRoot}/polyfills.ts`,
                            scripts: [],
                            index: `${sourceRoot}/index.html`
                        }
                    },
                    serve: {},
                    test: {}
                }
            }
        },
        version: 1
    };
    const pkgJsonConfig = {
        dependencies: {},
        devDependencies: {},
        peerDependencies: {}
    };
    function createIgPkgJson(igxPkg = angular_templates_1.NPM_PACKAGE) {
        const filePath = `node_modules/${igxPkg}/package.json`;
        tree.create(filePath, JSON.stringify(pkgJsonConfig));
        const pkgJson = JSON.parse(tree.readContent(filePath));
        const angularCommon = "@angular/common";
        const angularCore = "@angular/core";
        const targetVersion = "^7.0.3";
        pkgJson.peerDependencies[angularCommon] = targetVersion;
        pkgJson.peerDependencies[angularCore] = targetVersion;
        tree.overwrite(filePath, JSON.stringify(pkgJson));
    }
    function populatePkgJson(igxPkg = angular_templates_1.NPM_PACKAGE) {
        const targetFile = "/package.json";
        const angularCore = "@angular/core";
        const angularCommon = "@angular/common";
        const version = "^6.1.0";
        const pkgJson = JSON.parse(tree.readContent(targetFile));
        pkgJson.dependencies[angularCore] = version;
        pkgJson.dependencies[angularCommon] = version;
        pkgJson.dependencies[igxPkg] = "~7.0.0";
        tree.overwrite(targetFile, JSON.stringify(pkgJson));
    }
    function resetTree() {
        tree.overwrite("/angular.json", JSON.stringify(ngJsonConfig));
        tree.overwrite("/package.json", JSON.stringify(pkgJsonConfig));
        tree.overwrite("/src/index.html", `<head>
			 </head>
			 <body>
			 </body>`);
        tree.delete("/ignite-ui-cli.json");
    }
    beforeEach(() => {
        tree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
        tree.create("/angular.json", JSON.stringify(ngJsonConfig));
        tree.create("/package.json", JSON.stringify(pkgJsonConfig));
        tree.create("/src/index.html", `<head>
			 </head>
			 <body>
			 </body>`);
        createIgPkgJson();
        populatePkgJson();
    });
    it("should create the needed files correctly", () => {
        expect(tree).toBeTruthy();
        expect(tree.exists("/angular.json")).toBeTruthy();
        expect(tree.exists("/package.json")).toBeTruthy();
        expect(tree.exists("/src/index.html"));
    });
    it("should create an ignite-ui-cli.json file correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        expect(tree.exists("ignite-ui-cli.json")).toBeTruthy();
        const cliJsonData = JSON.parse(tree.readContent("/ignite-ui-cli.json"));
        expect(cliJsonData.project.projectTemplate).toEqual("ng-cli");
    }));
    it("should add typography correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const targetFile = "/src/index.html";
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        const content = tree.readContent(targetFile);
        expect(content.includes("<body class=\"igx-typography igx-scrollbar\">")).toBeTruthy();
    }));
    it("should add Titillium and Material Icons stylesheets correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const targetFile = "/src/index.html";
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        const content = tree.readContent(targetFile);
        const headContentsRegex = /(?:<head>)([\s\S]*)(?:<\/head>)/;
        expect(headContentsRegex.test(content)).toBeTruthy();
        expect(headContentsRegex.exec(content).pop()).toContain("family=Titillium+Web");
        expect(headContentsRegex.exec(content).pop()).toContain("family=Material+Icons");
    }));
    it("should add the default scss theme correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const targetFile = "/src/styles.scss";
        tree.create(targetFile, "");
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        let content = tree.readContent(targetFile);
        expect(content.includes(`@import "~${angular_templates_1.NPM_PACKAGE}`)).toBeTruthy();
        tree.overwrite(targetFile, "");
        resetTree();
        createIgPkgJson(angular_templates_1.FEED_PACKAGE);
        populatePkgJson(angular_templates_1.FEED_PACKAGE);
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        content = tree.readContent(targetFile);
        expect(content.includes(`@import "~${angular_templates_1.FEED_PACKAGE}`)).toBeTruthy();
    }));
    it("should add the default css theme to the workspace", () => __awaiter(void 0, void 0, void 0, function* () {
        const targetFile = "/angular.json";
        expect(tree.exists(targetFile)).toBeTruthy();
        let targetImport = `node_modules/${angular_templates_1.NPM_PACKAGE}/styles/igniteui-angular.css`;
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        let workspace = JSON.parse(tree.read("/angular.json").toString());
        let currentProjectName = workspace.defaultProject;
        expect(workspace.projects[currentProjectName].architect.build.options.styles.filter((s) => s.includes(targetImport)).length)
            .toBeGreaterThan(0);
        expect(workspace.projects[currentProjectName].architect.test.options.styles.filter((s) => s.includes(targetImport)).length)
            .toBeGreaterThan(0);
        resetTree();
        createIgPkgJson(angular_templates_1.FEED_PACKAGE);
        populatePkgJson(angular_templates_1.FEED_PACKAGE);
        targetImport = `node_modules/${angular_templates_1.FEED_PACKAGE}/styles/igniteui-angular.css`;
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        workspace = JSON.parse(tree.read("/angular.json").toString());
        currentProjectName = workspace.defaultProject;
        expect(workspace.projects[currentProjectName].architect.build.options.styles.filter((s) => s.includes(targetImport)).length)
            .toBeGreaterThan(0);
        expect(workspace.projects[currentProjectName].architect.test.options.styles.filter((s) => s.includes(targetImport)).length)
            .toBeGreaterThan(0);
    }));
    it("should not add the default css theme to the workspace if the global styles file is scss", () => __awaiter(void 0, void 0, void 0, function* () {
        // if the global styles file is scss or sass - the default theme is imported there
        const stylesheet = "/src/styles.scss";
        tree.create(stylesheet, "");
        const targetFile = "/angular.json";
        expect(tree.exists(targetFile)).toBeTruthy();
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        const workspace = JSON.parse(tree.read("/angular.json").toString());
        const currentProjectName = workspace.defaultProject;
        // the schematic creates the hierarchy that leads to the styles object within the workspace,
        // providing that it is not already present
        expect(workspace.projects[currentProjectName].architect.build.styles).toBeUndefined();
        expect(workspace.projects[currentProjectName].architect.test.styles).toBeUndefined();
    }));
    it("should add the default sass theme correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const targetFile = "/src/styles.sass";
        tree.create(targetFile, "");
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        let content = tree.readContent(targetFile);
        expect(content.includes(`@import "~${angular_templates_1.NPM_PACKAGE}`)).toBeTruthy();
        tree.overwrite(targetFile, "");
        resetTree();
        createIgPkgJson(angular_templates_1.FEED_PACKAGE);
        populatePkgJson(angular_templates_1.FEED_PACKAGE);
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        content = tree.readContent(targetFile);
        expect(content.includes(`@import "~${angular_templates_1.FEED_PACKAGE}`)).toBeTruthy();
    }));
    it("should add BrowserAnimationsModule to app.module.ts", () => __awaiter(void 0, void 0, void 0, function* () {
        const moduleContent = `import { NgModule } from '@angular/core';
@NgModule({
	imports: []
})
export class AppModule {
}
`;
        const moduleContentAfterSchematic = `import { NgModule } from '@angular/core';
import { BrowserAnimationsModule } from "@angular/platform-browser/animations";
@NgModule({
	imports: [BrowserAnimationsModule]
})
export class AppModule {
}
`;
        const targetFile = "./src/app/app.module.ts";
        tree.create(targetFile, moduleContent);
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        const content = tree.readContent(targetFile);
        expect(content.replace(/\r\n/g, "\n")).toEqual(moduleContentAfterSchematic.replace(/\r\n/g, "\n"));
    }));
    it("should properly display the dependency mismatch warning", () => __awaiter(void 0, void 0, void 0, function* () {
        const warns = [];
        runner.logger.subscribe(entry => {
            if (entry.level === "warn") {
                warns.push(entry.message);
            }
        });
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        let pattern = new RegExp(`WARNING Version mismatch detected - ${angular_templates_1.NPM_PACKAGE}`);
        expect(warns).toContain(jasmine.stringMatching(pattern));
        resetTree();
        createIgPkgJson(angular_templates_1.FEED_PACKAGE);
        populatePkgJson(angular_templates_1.FEED_PACKAGE);
        pattern = new RegExp(`WARNING Version mismatch detected - ${angular_templates_1.FEED_PACKAGE}`);
        yield runner.runSchematicAsync("cli-config", {}, tree).toPromise();
        expect(warns).toContain(jasmine.stringMatching(pattern));
    }));
});
