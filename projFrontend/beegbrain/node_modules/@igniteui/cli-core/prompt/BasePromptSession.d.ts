import { BaseTemplateManager } from "../templates";
import { Component, Config, Framework, ProjectLibrary, ProjectTemplate, Template } from "../types";
import { Task } from "./TaskRunner";
export declare abstract class BasePromptSession {
    protected templateManager: BaseTemplateManager;
    protected config: Config;
    constructor(templateManager: BaseTemplateManager);
    /**
     * Start questions session for project creation
     */
    start(): Promise<void>;
    /**
     * Starts a loop of 'Choose an action' questions
     * @param projectLibrary The framework to use
     * @param theme Theme to use
     */
    chooseActionLoop(projectLibrary: ProjectLibrary): Promise<void>;
    /** Install packages and run project */
    protected abstract completeAndRun(port?: number): any;
    /** Upgrade packages to use private Infragistics feed */
    protected abstract upgradePackages(): any;
    /**
     * Get user name and set template's extra configurations if any
     * @param projectLibrary to add component to
     * @param component to get template for
     */
    protected abstract templateSelectedTask(type?: "component" | "view"): Task<PromptTaskContext>;
    /**
     * Gets the user input according to provided `options`.Returns directly if single choice is provided.
     * @param options to use for the user input
     * @param withBackChoice Add a "Back" option to choices list
     */
    protected getUserInput(options: IUserInputOptions, withBackChoice?: boolean): Promise<string>;
    /**
     * Check if provided @param name is valid for project name
     * @param name the name to check
     * @param checkFolder check if folder with this name already exists
     */
    protected nameIsValid(name: string, checkFolder?: boolean): boolean;
    /** Returns the framework names, potentially filtered by config */
    protected getFrameworkNames(): string[];
    /**
     * Gets the project library from the user input, or default if provided @param framework has single project library
     * @param framework to get project library for
     */
    protected getProjectLibrary(framework: Framework): Promise<ProjectLibrary>;
    /**
     * Gets project template from user input, or default if provided `projectLibrary` has a single template
     * @param projectLibrary to get theme for
     */
    protected getProjectTemplate(projectLibrary: ProjectLibrary): Promise<ProjectTemplate>;
    /**
     * Gets the theme from the user input, or default if provided @param projectLibrary has a single theme
     * @param projectLibrary to get theme for
     */
    protected getTheme(projectLibrary: ProjectLibrary): Promise<string>;
    /**
     * Prompt user for template name with appropriate default
     * @param template template to get name for
     * @param type type of the name question
     */
    protected chooseTemplateName(template: Template, type?: "component" | "view"): Promise<string>;
    /** Create prompts from template extra configuration and assign user answers to the template */
    protected customizeTemplateTask(template: Template): Promise<void>;
    /**
     * Returns a new array with inquirer.Separator() added between items
     * @param array The original array to add separator to
     */
    private addSeparators;
    /**
     * Generate questions from extra configuration array
     * @param extraConfig
     */
    private createQuestions;
    /**
     * Conversion placeholder
     * @param answers
     */
    private parseAnswers;
    /**
     * Task to pick action and load consecutive tasks
     * @param projectLibrary to add component to
     */
    private chooseActionTask;
    /**
     * Get component group from user input
     * @param projectLibrary to add component to
     */
    private getComponentGroupTask;
    /**
     * Get component in the selected components group
     * @param projectLibrary to add component to
     * @param groupName to chose components from
     */
    private getComponentTask;
    /**
     * Get template for selected component
     * @param projectLibrary to add component to
     * @param component to get template for
     */
    private getTemplateTask;
    /**
     * Get template for custom view from user input
     * @param projectLibrary to add component to
     * @param theme to use to style the project
     */
    private getCustomViewTask;
    private logAutoSelected;
    /** Returns the projectLibraries names, potentially filtered by config */
    private getProjectLibNames;
    /**
     * Generates a list of options for chooseActionLoop
     * @param projectLibrary to generate options for
     */
    private generateActionChoices;
}
/** Options for User Input */
export interface IUserInputOptions {
    type: string;
    name: string;
    message: string;
    choices?: any[];
    default?: any;
    validate?: (input: string) => string | boolean;
}
/** Context type for prompt tasks */
export interface PromptTaskContext {
    projectLibrary: ProjectLibrary;
    group?: string;
    component?: Component;
    template?: Template;
    name?: string;
}
