interface PromptInputTask<T> {
    done: boolean;
    run: Task<T>;
}
export declare const WIZARD_BACK_OPTION = "Back";
export declare type PromptInputTaskResult = typeof WIZARD_BACK_OPTION | boolean | void;
export declare type Task<T> = (runner: TaskRunner<T>, context: T) => Promise<PromptInputTaskResult>;
export declare class TaskRunner<T> {
    protected context: T;
    protected taskQueue: Array<PromptInputTask<T>>;
    protected additions: Array<PromptInputTask<T>>;
    protected currentTask: PromptInputTask<T>;
    get done(): boolean;
    constructor(context: T);
    /** Add a task to the queue. Will insert after current if called while running */
    addTask(task: Task<T>): void;
    /** clear */
    clearPending(): void;
    /** mark all tasks as incomplete */
    resetTasks(): void;
    /** run */
    run(): Promise<void>;
}
export {};
