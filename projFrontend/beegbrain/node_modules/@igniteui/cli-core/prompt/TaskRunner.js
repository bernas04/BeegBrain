"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskRunner = exports.WIZARD_BACK_OPTION = void 0;
exports.WIZARD_BACK_OPTION = "Back";
class TaskRunner {
    constructor(context) {
        this.context = context;
        this.taskQueue = [];
        this.additions = [];
    }
    get done() {
        return !this.taskQueue.filter(x => !x.done).length;
    }
    /** Add a task to the queue. Will insert after current if called while running */
    addTask(task) {
        const taskObj = { done: false, run: task };
        if (this.currentTask) {
            this.additions.push(taskObj);
        }
        else {
            this.taskQueue.push(taskObj);
        }
    }
    /** clear */
    clearPending() {
        if (this.currentTask) {
            const index = this.taskQueue.indexOf(this.currentTask);
            this.taskQueue = this.taskQueue.slice(0, index + 1);
        }
        else {
            this.taskQueue = [];
        }
    }
    /** mark all tasks as incomplete */
    resetTasks() {
        this.taskQueue.forEach(x => x.done = false);
    }
    /** run */
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < this.taskQueue.length; i++) {
                const task = this.taskQueue[i];
                if (task.done) {
                    continue;
                }
                const previousTask = this.taskQueue[i - 1] || task;
                this.currentTask = task;
                const result = yield task.run(this, this.context);
                if (this.additions.length) {
                    this.taskQueue.splice(i + 1, 0, ...this.additions);
                    this.additions = [];
                }
                this.currentTask = null;
                if (result !== true) {
                    task.done = false;
                    previousTask.done = result === exports.WIZARD_BACK_OPTION ? false : previousTask.done;
                    break;
                }
                task.done = result;
            }
        });
    }
}
exports.TaskRunner = TaskRunner;
