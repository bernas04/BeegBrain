import * as ts from "typescript";
import { TemplateDependency } from "../types";
/**
 * Apply various updates to typescript files using AST
 */
export declare class TypeScriptFileUpdate {
    private targetPath;
    protected formatOptions: {
        spaces: boolean;
        indentSize: number;
        singleQuotes: boolean;
    };
    private fileSystem;
    private targetSource;
    private importsMeta;
    private requestedImports;
    private ngMetaEdits;
    private createdStringLiterals;
    /** Create updates for a file. Use `add<X>` methods to add transformations and `finalize` to apply and save them. */
    constructor(targetPath: string);
    /** Applies accumulated transforms, saves and formats the file */
    finalize(): void;
    /**
     * Create configuration object for a component and add it to the `Routes` array variable.
     * Imports the first exported class and finalizes the file update (see `.finalize()`).
     * @param filePath Path to the component file to import
     * @param linkPath Routing `path` to add
     * @param linkText Text of the route to add as `data.text`
     * @param parentRoutePath Will include the new route as a **child** of the specified route path
     * @param routesVariable Name of the array variable holding routes
     */
    addChildRoute(filePath: string, linkPath: string, linkText: string, parentRoutePath: string, routesVariable?: string): void;
    /**
     * Create configuration object for a component and add it to the `Routes` array variable.
     * Imports the first exported class and finalizes the file update (see `.finalize()`).
     * @param filePath Path to the component file to import
     * @param linkPath Routing `path` to add
     * @param linkText Text of the route to add as `data.text`
     * @param routesVariable Name of the array variable holding routes
     */
    addRoute(filePath: string, linkPath: string, linkText: string, routesVariable?: string): void;
    /**
     * Import class and add it to `NgModule` declarations.
     * Creates `declarations` array if one is not present already.
     * @param filePath Path to the file to import
     */
    addDeclaration(filePath: string, addToExport?: boolean): void;
    /**
     * Add a metadata update to the file's `NgModule`. Will also import identifiers.
     */
    addNgModuleMeta(dep: TemplateDependency, variables?: {
        [key: string]: string;
    }): void;
    /** Initializes existing imports info, [re]sets import and `NgModule` edits */
    protected initState(): void;
    protected loadImportsMeta(): {
        lastIndex: number;
        modulePaths: any[];
    };
    protected addRouteModuleEntry(filePath: string, linkPath: string, linkText: string, routesVariable?: string, parentRoutePath?: string): void;
    /**
     * Add named imports from a path/package.
     * @param identifiers Strings to create named import from ("Module" => `import { Module }`)
     * @param modulePath Module specifier - can be path to file or npm package, etc
     */
    protected requestImport(identifiers: string[], modulePath: string): void;
    /** Add `import` statements not previously found in the file  */
    protected addNewFileImports(): void;
    /** Transformation to apply edits to existing named import declarations */
    protected importsTransformer: ts.TransformerFactory<ts.Node>;
    /** Transformation to apply `this.ngMetaEdits` to `NgModule` metadata properties */
    protected ngModuleTransformer: ts.TransformerFactory<ts.Node>;
    /** Format a TS source file, very TBD */
    protected formatFile(filePath: string): void;
    /**  Try and parse formatting from project `.editorconfig` / `tslint.json` */
    protected readFormatConfigs(): void;
    /**
     * Apply formatting changes (position based) in reverse
     * from https://github.com/Microsoft/TypeScript/issues/1651#issuecomment-69877863
     */
    private applyChanges;
    /** Return source file formatting options */
    private getFormattingOptions;
    /** Get language service host, sloppily */
    private getLanguageHost;
    /** Convert a string or string array union to array. Splits strings as comma delimited */
    private asArray;
    private createVisitor;
    private createRouteEntry;
}
