"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkspaceHost = exports.addClassToBody = void 0;
// TODO: Better place for these?
// current code transpiles to clean functions without imports from packages
// that core doesn't depend on, but still not the best option.
function addClassToBody(host, className) {
    const indexHtml = "src/index.html";
    const bodyTagRegex = /<body[^>]*?>/;
    const classRegex = /class=["']([^"']*?)["']/;
    if (host.exists(indexHtml)) {
        let content = host.read(indexHtml).toString();
        if (!bodyTagRegex.test(content)) {
            return;
        }
        const bodyTag = bodyTagRegex.exec(content).pop();
        if (!classRegex.test(bodyTag)) {
            content = content.replace(bodyTag, bodyTag.replace(/>$/, ` class="${className}">`));
        }
        else {
            const classes = classRegex.exec(bodyTag).pop();
            const classList = classes ? classes.split(" ") : [];
            if (classList.indexOf(className) !== -1) {
                return;
            }
            classList.push(className);
            content = content.replace(bodyTag, bodyTag.replace(classRegex, `class="${classList.join(" ")}"`));
        }
        host.overwrite(indexHtml, content);
    }
}
exports.addClassToBody = addClassToBody;
/** Creates a schematics tree workspace host. */
const createWorkspaceHost = (tree) => ({
    readFile: (path) => __awaiter(void 0, void 0, void 0, function* () {
        const data = tree.read(path);
        // can use fileBufferToString
        return data === null || data === void 0 ? void 0 : data.toString();
    }),
    writeFile: (path, data) => __awaiter(void 0, void 0, void 0, function* () {
        tree.overwrite(path, data);
    }),
    isDirectory: (path) => __awaiter(void 0, void 0, void 0, function* () { return !tree.exists(path) && tree.getDir(path).subfiles.length > 0; }),
    isFile: (path) => __awaiter(void 0, void 0, void 0, function* () { return tree.exists(path); })
});
exports.createWorkspaceHost = createWorkspaceHost;
