"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleAnalytics = void 0;
const crypto_1 = require("crypto");
const fs = require("fs");
const path = require("path");
const qs = require("querystring");
const App_1 = require("./App");
const ProjectConfig_1 = require("./ProjectConfig");
const Util_1 = require("./Util");
class GoogleAnalytics {
    /**
     * Generates http post request with provided parameters and sends it to GA
     * @param parameters Object containing all the parameters to send
     */
    static post(parameters) {
        const config = ProjectConfig_1.ProjectConfig.getConfig();
        if (config.disableAnalytics) {
            return;
        }
        // set GA protocol version. This should be 1
        parameters.v = 1;
        // set the Tracking ID
        parameters.tid = this.trackingID;
        // set application version if not set beforehand
        if (!parameters.av) {
            if (!this.appVersion) {
                this.appVersion = Util_1.Util.version();
            }
            parameters.av = this.appVersion;
        }
        // set application name
        parameters.an = App_1.App.appName;
        //	set user agent string. We are using this for detecting the user's OS.
        //	as well as node version. The latest is set as browser version.
        const nodeVersion = process.version;
        const os = this.getOsForUserAgent();
        const npmVersion = this.getNpmVersion();
        parameters.ua = `node/${nodeVersion} (${os}) npm/${npmVersion}`;
        //	set user ID
        parameters.uid = this.getUUID();
        //	generate http request and sent it to GA
        const queryString = qs.stringify(parameters);
        const fullPath = "/collect?" + queryString;
        const options = { host: "www.google-analytics.com", path: fullPath, method: "POST" };
        const https = require("https");
        const req = https.request(options);
        req.on("error", e => {
            // TODO: save all the logs and send them later
        });
        req.end();
    }
    static getUUID() {
        const absolutePath = path.join(this.userDataFolder, this.appFolder, this.userSettings);
        let UUID = "";
        if (fs.existsSync(absolutePath)) {
            UUID = require(absolutePath).UUID;
        }
        else {
            const dirName = path.dirname(absolutePath);
            if (!fs.existsSync(dirName)) {
                fs.mkdirSync(dirName);
            }
            UUID = this.getUserID();
            fs.writeFileSync(absolutePath, JSON.stringify({ UUID }));
        }
        return UUID;
    }
    static getUserID() {
        const platform = process.platform;
        let result = "";
        try {
            result = this.getMachineID(platform, result);
        }
        catch (_a) {
            result = this.createRandomGuid()
                .replace(/\r+|\n+|\s+/ig, "")
                .toLowerCase();
        }
        result = (0, crypto_1.createHash)("sha256").update(result).digest("hex");
        return result;
    }
    static getMachineID(platform, result) {
        switch (platform) {
            case "darwin":
                result = Util_1.Util.execSync("ioreg -rd1 -c IOPlatformExpertDevice").toString()
                    .split("IOPlatformUUID")[1]
                    .split("\n")[0].replace(/\=|\s+|\"/ig, "")
                    .toLowerCase();
                break;
            case "win32":
                result = Util_1.Util.execSync("REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid")
                    .toString()
                    .split("REG_SZ")[1]
                    .replace(/\r+|\n+|\s+/ig, "")
                    .toLowerCase();
                break;
            case "linux":
                result =
                    Util_1.Util.execSync("( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :")
                        .toString()
                        .replace(/\r+|\n+|\s+/ig, "")
                        .toLowerCase();
                break;
            case "freebsd":
                result = Util_1.Util.execSync("kenv -q smbios.system.uuid").toString()
                    .replace(/\r+|\n+|\s+/ig, "")
                    .toLowerCase();
                break;
        }
        return result;
    }
    static createRandomGuid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        const currentDate = new Date();
        const currentTime = currentDate.getTime().toString();
        return currentTime + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
    }
    static getOsForUserAgent() {
        const platform = process.platform;
        switch (platform) {
            case "darwin":
                return "Mac OS";
            case "win32":
                return "Windows NT";
            case "linux":
                return "Linux";
            case "freebsd":
                return "OpenBSD";
            default:
                return "";
        }
    }
    static getNpmVersion() {
        if (!this.npmVersion) {
            this.npmVersion = "";
            const buffer = Util_1.Util.execSync("npm -v");
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < buffer.length; i += 1) {
                this.npmVersion += String.fromCharCode(+buffer[i]).toString();
            }
        }
        return this.npmVersion.trim();
    }
}
exports.GoogleAnalytics = GoogleAnalytics;
GoogleAnalytics.userDataFolder = process.env.APPDATA ||
    (process.platform === "darwin" ? "/Users/Shared" : process.env.HOME + "/.npm/");
GoogleAnalytics.appFolder = "igniteui-cli";
GoogleAnalytics.userSettings = "user-settings.json";
GoogleAnalytics.trackingID = "UA-392932-23";
process.on("uncaughtException", err => {
    GoogleAnalytics.post({
        t: "exception",
        exd: err.message
    });
});
