import { Component, ComponentGroup, ProjectLibrary, ProjectTemplate, Template } from "../types";
export declare class BaseProjectLibrary implements ProjectLibrary {
    private rootPath;
    projectType: string;
    framework: string;
    name: string;
    themes: string[];
    /** Implementation, not part of the interface */
    groupDescriptions: Map<string, string>;
    /** Used to prefix folders that don't contain usable templates */
    protected _ignorePrefix: string;
    protected _projectsPath: string;
    protected _customTemplatesPath: string;
    protected _generateCommandPath: string;
    private _templates;
    get templates(): Template[];
    private _projectIds;
    get projectIds(): string[];
    private _projects;
    get projects(): ProjectTemplate[];
    private _customTemplates;
    get customTemplates(): Template[];
    private _components;
    get components(): Component[];
    private _generateTemplateFolderPath;
    get generateTemplateFolderPath(): string;
    /**
     *
     */
    constructor(rootPath: string);
    getTemplateById(id: string): Template;
    getTemplateByName(name: string): Template;
    registerTemplate(template: Template): void;
    getComponentByName(name: string): Component;
    getCustomTemplates(): Template[];
    getCustomTemplateNames(): string[];
    getCustomTemplateByName(name: string): Template;
    getComponentGroupNames(): string[];
    getComponentsByGroup(group: string): Component[];
    getComponentGroups(): ComponentGroup[];
    getComponentNamesByGroup(group: string): string[];
    /**
     * Get project template
     * @param id ID of the project template.
     */
    getProject(id: string): ProjectTemplate;
    hasProject(id: string): boolean;
    hasTemplate(id: string): boolean;
}
