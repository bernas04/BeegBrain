import { Framework, ProjectLibrary, Template } from "../types";
export declare abstract class BaseTemplateManager {
    private templatesAbsPath;
    protected _quickstartTemplatesPath: string;
    protected frameworks: Framework[];
    constructor(templatesAbsPath: string);
    getFrameworkIds(): string[];
    getFrameworkNames(): string[];
    /**  Returns framework found by its name or undefined. */
    getFrameworkByName(name: string): Framework;
    /**  Returns framework found by its ID or undefined. */
    getFrameworkById(id: string): Framework;
    /**
     * Get ProjectLibrary Names list
     * @param frameworkId
     * @returns Returns projectLibrary names array
     */
    getProjectLibraryNames(frameworkId: string): string[];
    /**
     * Get ProjectLibrary by name
     * @param framework
     * @param name
     * @returns Returns matching projectLibrary or undefined
     */
    getProjectLibraryByName(framework: Framework, name: string): ProjectLibrary;
    /**
     * Get a specific project library
     * @param frameworkId
     * @param projectType
     * @returns Returns projectLibrary, or null.
     */
    getProjectLibrary(frameworkId: string, projectType?: string): ProjectLibrary;
    updateProjectConfiguration(template: Template): void;
    /**
     * Loads properties from a JSON file and initializes a base Template implementation
     * @param filePath Path to a json config file representing a template
     * @returns null if no proper file is found
     */
    protected abstract loadFromConfig(filePath: string): Template;
    /** Read config and load custom templates based on type */
    private loadExternalTemplates;
    private addTemplates;
}
