"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgniteUIForAngularTemplate = void 0;
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
const package_resolve_1 = require("./package-resolve");
class IgniteUIForAngularTemplate {
    constructor(rootPath) {
        this.rootPath = rootPath;
        this.listInComponentTemplates = true;
        this.listInCustomTemplates = false;
        this.framework = "angular";
        this.projectType = "igx-ts";
        this.hasExtraConfiguration = false;
        this.packages = [];
        this.dependencies = [];
        this.delimiters = {
            content: {
                end: `%>`,
                start: `<%=`
            },
            path: {
                end: `__`,
                start: `__`
            }
        };
    }
    get templatePaths() {
        return [path.join(this.rootPath, "files")];
    }
    generateConfig(name, options) {
        if (options["modulePath"] && !cli_core_1.Util.fileExists(path.join(process.cwd(), `src\\app`, options["modulePath"]))) {
            cli_core_1.Util.error(`Wrong module path provided: ${options["modulePath"]}. No components were added!`);
            return Promise.resolve(false);
        }
        return Object.assign({}, options["extraConfig"], this.getBaseVariables(name));
    }
    //TODO: rename name to fullName for clarity + in all other places fileName to fullName
    registerInProject(projectPath, name, options) {
        let modulePath = "app.module.ts";
        if (options && options.modulePath) {
            modulePath = options.modulePath;
        }
        // D.P. Don't use the top-level import as that chains import of typescript
        // which slows down execution of the entire component noticeably (template loading)
        // https://www.typescriptlang.org/docs/handbook/modules.html#dynamic-module-loading-in-nodejs
        // tslint:disable-next-line:variable-name
        const TsUpdate = 
        // tslint:disable-next-line:no-submodule-imports
        require("@igniteui/cli-core/typescript").TypeScriptFileUpdate;
        if (!(options && options.skipRoute) && cli_core_1.App.container.get(cli_core_1.FS_TOKEN).fileExists("src/app/app-routing.module.ts")) {
            //1) import the component class name,
            //2) and populate the Routes array with the path and component
            //for example: { path: 'combo', component: ComboComponent }
            const routingModule = new TsUpdate(path.join(projectPath, "src/app/app-routing.module.ts"));
            routingModule.addRoute(path.join(projectPath, `src/app/${this.folderName(name)}/${this.fileName(name)}.component.ts`), this.fileName(name), //path
            cli_core_1.Util.nameFromPath(name) //text
            );
        }
        //3) add an import of the component class from its file location.
        //4) populate the declarations portion of the @NgModule with the component class name.
        const mainModulePath = path.join(projectPath, `src/app/${modulePath}`);
        const mainModule = new TsUpdate(mainModulePath);
        this.addClassDeclaration(mainModule, projectPath, name, modulePath);
        // import IgxModules and other dependencies
        for (const dep of this.dependencies) {
            if (dep.from && dep.from.startsWith(".")) {
                // relative file dependency
                const copy = Object.assign({}, dep);
                copy.from = cli_core_1.Util.relativePath(mainModulePath, path.join(projectPath, copy.from), true, true);
                mainModule.addNgModuleMeta(copy, cli_core_1.Util.applyDelimiters(this.getBaseVariables(name), this.delimiters.content));
            }
            else {
                mainModule.addNgModuleMeta(dep, cli_core_1.Util.applyDelimiters(this.getBaseVariables(name), this.delimiters.content));
            }
        }
        mainModule.finalize();
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    addClassDeclaration(mainModule, projPath, name, modulePath) {
        mainModule.addDeclaration(path.join(projPath, `src/app/${this.folderName(name)}/${this.fileName(name)}.component.ts`), modulePath !== "app.module.ts");
    }
    getBaseVariables(name) {
        const config = {};
        config["name"] = cli_core_1.Util.nameFromPath(name);
        config["ClassName"] = cli_core_1.Util.className(cli_core_1.Util.nameFromPath(name));
        config["path"] = this.folderName(name);
        config["filePrefix"] = this.fileName(name);
        config["description"] = this.description;
        config["cliVersion"] = cli_core_1.Util.version();
        config["camelCaseName"] = cli_core_1.Util.camelCase(name);
        config["igxPackage"] = (0, package_resolve_1.resolveIgxPackage)(package_resolve_1.NPM_PACKAGE);
        config["dockManagerPackage"] = (0, package_resolve_1.resolveIgxPackage)(package_resolve_1.NPM_DOCK_MANAGER);
        /** 'nameMerged' is never used igx templates, removed */
        return config;
    }
    folderName(pathName) {
        //TODO: should remove the spaces
        const parts = path.parse(pathName);
        let folderName = pathName;
        if (parts.dir) {
            folderName = path.join(parts.dir, parts.name);
            folderName = folderName.replace(/\\/g, "/");
            // TODO: config-based "src/app"?
            const relative = path.join(process.cwd(), "src/app", folderName);
            // path.join will also resolve any '..' segments
            // so if relative result doesn't start with CWD it's out of project root
            if (!relative.startsWith(process.cwd())) {
                cli_core_1.Util.error(`Path ${"src/app/" + folderName} is not valid!`, "red");
                process.exit(1);
            }
            //clean up potential leading spaces in folder names (`path/    name`):
            folderName = folderName.replace(/\/\s+/g, "/");
        }
        return cli_core_1.Util.lowerDashed(folderName);
    }
    fileName(pathName) {
        const name = cli_core_1.Util.nameFromPath(pathName);
        return cli_core_1.Util.lowerDashed(name);
    }
}
exports.IgniteUIForAngularTemplate = IgniteUIForAngularTemplate;
