"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpgradeablePackages = exports.resolveIgxPackage = exports.UPGRADEABLE_PACKAGES = exports.FEED_DOCK_MANAGER = exports.NPM_DOCK_MANAGER = exports.FEED_PACKAGE = exports.NPM_PACKAGE = void 0;
const cli_core_1 = require("@igniteui/cli-core");
exports.NPM_PACKAGE = "igniteui-angular";
exports.FEED_PACKAGE = "@infragistics/igniteui-angular";
exports.NPM_DOCK_MANAGER = "igniteui-dockmanager";
exports.FEED_DOCK_MANAGER = "@infragistics/igniteui-dockmanager";
/** packages map of `trial: licensed` names */
exports.UPGRADEABLE_PACKAGES = {
    [exports.NPM_PACKAGE]: exports.FEED_PACKAGE,
    [exports.NPM_DOCK_MANAGER]: exports.FEED_DOCK_MANAGER
};
function resolveIgxPackage(packageName) {
    const fs = cli_core_1.App.container.get(cli_core_1.FS_TOKEN);
    // read project package JSON
    if (fs.fileExists("./package.json")) {
        const packageJson = JSON.parse(fs.readFile("./package.json"));
        const dependencies = packageJson["dependencies"];
        const licensed = exports.UPGRADEABLE_PACKAGES[packageName];
        if (dependencies[licensed]) {
            return licensed;
        }
    }
    return packageName;
}
exports.resolveIgxPackage = resolveIgxPackage;
function getUpgradeablePackages() {
    const fs = cli_core_1.App.container.get(cli_core_1.FS_TOKEN);
    const upgradeable = [];
    if (fs.fileExists("./package.json")) {
        const packageJson = JSON.parse(fs.readFile("./package.json"));
        const dependencies = packageJson["dependencies"];
        for (const packageEntry in exports.UPGRADEABLE_PACKAGES) {
            if (dependencies[packageEntry]) {
                upgradeable.push({
                    trial: packageEntry,
                    licensed: exports.UPGRADEABLE_PACKAGES[packageEntry]
                });
            }
        }
    }
    return upgradeable;
}
exports.getUpgradeablePackages = getUpgradeablePackages;
