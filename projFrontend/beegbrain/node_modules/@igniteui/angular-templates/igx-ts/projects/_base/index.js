"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseIgxProject = void 0;
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
const Update_1 = require("../../../Update");
class BaseIgxProject {
    constructor() {
        this.id = "base";
        this.name = "base";
        this.description = "Empty project layout structure for Ignite UI for Angular";
        this.dependencies = [];
        this.framework = "angular";
        this.projectType = "igx-ts";
        this.hasExtraConfiguration = false;
        this.delimiters = {
            content: {
                end: `%>`,
                start: `<%=`
            },
            path: {
                end: `__`,
                start: `__`
            }
        };
        this.CUSTOM_THEME = `/* See: https://www.infragistics.com/products/ignite-ui-angular/angular/components/themes/sass/index */
@use "igniteui-angular/theming" as *;

$primary: #731963 !default;
$secondary: #ce5712 !default;

$app-palette: palette($primary, $secondary);

/* autoprefixer grid: on */

@include core();
@include typography($font-family: $material-typeface, $type-scale: $material-type-scale);
@include theme($app-palette);
`;
        this.DEFAULT_THEME = `,
              "node_modules/igniteui-angular/styles/igniteui-angular.css"`;
    }
    get templatePaths() {
        return [path.join(__dirname, "files")];
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    upgradeIgniteUIPackages(projectPath, packagePath) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, Update_1.updateWorkspace)(projectPath);
        });
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    generateConfig(name, theme, ...options) {
        const config = {
            name,
            theme,
            cliVersion: cli_core_1.Util.version(),
            CustomTheme: "",
            dashName: cli_core_1.Util.lowerDashed(name),
            DefaultTheme: "",
            dot: ".",
            path: name,
            projectTemplate: this.id
        };
        switch (theme) {
            case "Custom":
                config["CustomTheme"] = this.CUSTOM_THEME;
                config["themePath"] = "Custom";
                break;
            case "Default":
            default:
                config["DefaultTheme"] = this.DEFAULT_THEME;
                config["themePath"] = "node_modules/igniteui-angular/styles/igniteui-angular.css";
                break;
        }
        return config;
    }
}
exports.BaseIgxProject = BaseIgxProject;
