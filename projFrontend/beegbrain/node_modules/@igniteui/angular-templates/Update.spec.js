"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_core_1 = require("@igniteui/cli-core");
const pkgResolve = require("./package-resolve");
const Update_1 = require("./Update");
// tslint:disable: object-literal-sort-keys
describe("Igx templates - updateWorkspace", () => {
    let fsSpy;
    beforeAll(() => {
        fsSpy = jasmine.createSpyObj("fsSpy", ["fileExists", "directoryExists", "readFile", "writeFile", "glob"]);
        spyOn(cli_core_1.App.container, "get").and.returnValue(fsSpy);
        spyOnProperty(cli_core_1.App, "workDir", "get").and.returnValue("mockDir");
        spyOn(cli_core_1.ProjectConfig, "getConfig").and.returnValue({});
    });
    it("Should fail if current used package is registry package", () => __awaiter(void 0, void 0, void 0, function* () {
        spyOn(pkgResolve, "getUpgradeablePackages").and.returnValue([]);
        spyOn(cli_core_1.Util, "log");
        expect(yield (0, Update_1.updateWorkspace)("")).toEqual(false);
        expect(cli_core_1.Util.log).toHaveBeenCalledWith("Your app is already using packages from the Infragistics registry. You are good to go.", "green");
    }));
    it("Should fail if no packages.json is found", () => __awaiter(void 0, void 0, void 0, function* () {
        const upgradable = {
            trial: pkgResolve.NPM_PACKAGE,
            licensed: pkgResolve.FEED_PACKAGE
        };
        spyOn(pkgResolve, "getUpgradeablePackages").and.returnValue([upgradable]);
        fsSpy.directoryExists.and.returnValue(false);
        fsSpy.readFile.and.returnValue("");
        spyOn(cli_core_1.Util, "log");
        expect(yield (0, Update_1.updateWorkspace)("")).toEqual(false);
        expect(cli_core_1.Util.log).toHaveBeenCalledWith("Package.json not found!");
    }));
    it("Should fail if infragistics registry cannot be reached", () => __awaiter(void 0, void 0, void 0, function* () {
        const mockJSONInput = {
            someName: "testValue"
        };
        const upgradable = {
            trial: pkgResolve.NPM_PACKAGE,
            licensed: pkgResolve.FEED_PACKAGE
        };
        spyOn(pkgResolve, "getUpgradeablePackages").and.returnValue([upgradable]);
        fsSpy.directoryExists.and.returnValue(false);
        fsSpy.readFile.and.returnValue(JSON.stringify(mockJSONInput, null, 4));
        spyOn(cli_core_1.PackageManager, "ensureRegistryUser").and.returnValue(false);
        expect(yield (0, Update_1.updateWorkspace)("")).toEqual(false);
    }));
    it("Should update package.json file, removing non-scoped igniteui-angular packages", () => __awaiter(void 0, void 0, void 0, function* () {
        const mockPackageJSON = {
            dependencies: {
                "@alphabetically-sorted-scope/package": "^0.0.0",
                "alphabetically-second-package": "^0.0.0",
                "igniteui-angular": "^9.1.0",
                "igniteui-dockmanager": "^1.0.0",
                "some-package": "^0.0.0"
            }
        };
        fsSpy.fileExists.and.returnValue(true);
        fsSpy.readFile.and.callFake((filePath) => {
            if (filePath.indexOf("package.json") > -1) {
                return JSON.stringify(mockPackageJSON);
            }
            if (filePath.indexOf("angular.json") > -1) {
                return JSON.stringify({
                    projects: {}
                });
            }
        });
        spyOn(cli_core_1.PackageManager, "ensureRegistryUser").and.returnValue(true);
        spyOn(cli_core_1.Util, "log");
        expect(yield (0, Update_1.updateWorkspace)("")).toEqual(true);
        expect(fsSpy.writeFile).toHaveBeenCalledWith("package.json", cli_core_1.Util.formatPackageJson({
            dependencies: {
                "@alphabetically-sorted-scope/package": "^0.0.0",
                "@infragistics/igniteui-angular": "^9.1.0",
                "@infragistics/igniteui-dockmanager": "^1.0.0",
                "alphabetically-second-package": "^0.0.0",
                "some-package": "^0.0.0"
            }
        }));
        expect(fsSpy.writeFile).toHaveBeenCalledTimes(1);
    }));
    it("Should update import paths in files correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        const mockPackageJSON = {
            dependencies: {
                "some-package": "^0.0.0",
                "igniteui-angular": "^9.1.0",
                "igniteui-dockmanager": "^1.0.0"
            }
        };
        const mockFileArray = [{
                path: "src/home.component.ts",
                content: `import { something } from 'module';
import { bait } from 'igniteui-angular-core';
import { IgxGridComponent } from 'igniteui-angular';
import { IgcDockManager } from 'igniteui-dockmanager';

export class HomeComponent {
	title = 'igniteui-angular example';
}`,
                expected: `import { something } from 'module';
import { bait } from 'igniteui-angular-core';
import { IgxGridComponent } from '@infragistics/igniteui-angular';
import { IgcDockManager } from '@infragistics/igniteui-dockmanager';

export class HomeComponent {
	title = 'igniteui-angular example';
}`
            }, {
                path: "src/home.component.scss",
                content: `@use 'igniteui-angular/theming' as *;
@use 'igniteui-dockmanager/styles/themes/test' as *;
@include igx-core();
`,
                expected: `@use '@infragistics/igniteui-angular/theming' as *;
@use '@infragistics/igniteui-dockmanager/styles/themes/test' as *;
@include igx-core();
`
            }, {
                path: "angular.json",
                content: `{
	"projects": {
		"test": {
			"projectType": "application",
			"sourceRoot": "src",
			"root": "",
			"styles": [
				"src/styles.scss",
				"node_modules/igniteui-angular/styles/igniteui-angular.css",
				"node_modules/igniteui-dockmanager/styles/themes/test"
			]
		},
		"test-e2e": {}
	}
}`,
                expected: `{
	"projects": {
		"test": {
			"projectType": "application",
			"sourceRoot": "src",
			"root": "",
			"styles": [
				"src/styles.scss",
				"node_modules/@infragistics/igniteui-angular/styles/igniteui-angular.css",
				"node_modules/@infragistics/igniteui-dockmanager/styles/themes/test"
			]
		},
		"test-e2e": {}
	}
}`
            }, {
                path: "src/app.module.ts",
                content: `import { something } from 'module';
import { bait } from 'igniteui-angular-core';
import { IgxGridComponent } from 'igniteui-angular';
import { dockManagerLoader } from 'igniteui-dockmanager/loader';

export class HomeComponent {
title = 'igniteui-angular example';
}`,
                expected: `import { something } from 'module';
import { bait } from 'igniteui-angular-core';
import { IgxGridComponent } from '@infragistics/igniteui-angular';
import { dockManagerLoader } from '@infragistics/igniteui-dockmanager/loader';

export class HomeComponent {
title = 'igniteui-angular example';
}`
            }];
        fsSpy.glob.and.returnValues(["src/home.component.ts", "src/app.module.ts"], ["src/home.component.scss"], [], []);
        fsSpy.readFile.and.callFake((filePath) => {
            if (filePath.indexOf("package.json") > -1) {
                return JSON.stringify(mockPackageJSON);
            }
            const fileEntry = mockFileArray.find(entry => entry.path === filePath);
            return fileEntry.content;
        });
        fsSpy.fileExists.and.returnValue(true);
        spyOn(cli_core_1.PackageManager, "ensureRegistryUser").and.returnValue(true);
        expect(yield (0, Update_1.updateWorkspace)("")).toEqual(true);
        for (const fileEntry of mockFileArray) {
            expect(fsSpy.writeFile).toHaveBeenCalledWith(fileEntry.path, fileEntry.expected);
        }
        expect(fsSpy.glob).toHaveBeenCalledTimes(4);
    }));
});
