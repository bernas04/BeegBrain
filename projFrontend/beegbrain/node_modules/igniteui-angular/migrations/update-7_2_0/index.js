"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tasks_1 = require("@angular-devkit/schematics/tasks");
const UpdateChanges_1 = require("../common/UpdateChanges");
const add_normalize_1 = require("../../schematics/ng-add/add-normalize");
const util_1 = require("../../schematics/utils/util");
const core_1 = require("@angular-devkit/core");
const version = '7.2.0';
exports.default = () => (host, context) => __awaiter(void 0, void 0, void 0, function* () {
    context.logger.info(`Applying migration for Ignite UI for Angular to version ${version}`);
    const update = new UpdateChanges_1.UpdateChanges(__dirname, host, context);
    update.applyChanges();
    // add normalize:
    const workspaceHost = (0, util_1.createHost)(host);
    const { workspace } = yield core_1.workspaces.readWorkspace(host.root.path, workspaceHost);
    if ((0, add_normalize_1.addResetCss)(workspace, host)) {
        context.addTask(new tasks_1.NodePackageInstallTask());
    }
    yield core_1.workspaces.writeWorkspace(workspace, workspaceHost);
});
