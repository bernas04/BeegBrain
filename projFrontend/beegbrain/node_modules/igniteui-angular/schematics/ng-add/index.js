"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const package_handler_1 = require("../utils/package-handler");
const dependency_handler_1 = require("../utils/dependency-handler");
const add_normalize_1 = require("./add-normalize");
const util_1 = require("../utils/util");
const addNormalize = (options) => (tree, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.resetCss) {
        const workspaceHost = (0, util_1.createHost)(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace(tree.root.path, (0, util_1.createHost)(tree));
        const result = (0, add_normalize_1.addResetCss)(workspace, tree);
        yield core_1.workspaces.writeWorkspace(workspace, workspaceHost);
        if (!result) {
            context.logger.warn(`Could not complete adding reset styles. Those may need to be added manually.`);
        }
    }
});
exports.default = (options) => (0, schematics_1.chain)([
    addNormalize(options),
    (0, dependency_handler_1.addDependencies)(options),
    (0, package_handler_1.installPackageJsonDependencies)(options),
    (0, dependency_handler_1.logSuccess)(options)
]);
