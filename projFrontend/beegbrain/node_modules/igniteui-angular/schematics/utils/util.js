"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultProject = exports.createHost = exports.ProjectType = void 0;
const core_1 = require("@angular-devkit/core");
// from '@schematics/angular/utility/workspace-models'
var ProjectType;
(function (ProjectType) {
    ProjectType["Application"] = "application";
    ProjectType["Library"] = "library";
})(ProjectType = exports.ProjectType || (exports.ProjectType = {}));
const createHost = (tree) => ({
    readFile: (path) => __awaiter(void 0, void 0, void 0, function* () {
        const data = tree.read(path);
        // can use fileBufferToString
        return data === null || data === void 0 ? void 0 : data.toString();
    }),
    writeFile: (path, data) => __awaiter(void 0, void 0, void 0, function* () {
        tree.overwrite(path, data);
    }),
    isDirectory: (path) => __awaiter(void 0, void 0, void 0, function* () { return !tree.exists(path) && tree.getDir(path).subfiles.length > 0; }),
    isFile: (path) => __awaiter(void 0, void 0, void 0, function* () { return tree.exists(path); })
});
exports.createHost = createHost;
const getDefaultProject = (tree) => __awaiter(void 0, void 0, void 0, function* () {
    const { workspace } = yield core_1.workspaces.readWorkspace(tree.root.path, (0, exports.createHost)(tree));
    const defaultProject = workspace.projects.get(workspace.extensions['defaultProject']);
    return defaultProject;
});
exports.getDefaultProject = getDefaultProject;
